//@version=5
//Thanks For Ogirinal Source Script From mladen for Engulfing Script and @KP_House, @JusInNovel, @jdehorty for Dashboard
//and Indicator Original From X4815162342 MA TYPE Cross Edit For Forex Engulfing and HH LL Trading Style

//Let's Me Explain About This Indicator
//  LightGreen Diamond "3Engulfing" is Bullish Confrim Engulfing 3 Candle
//  LightRed Diamond "3Engulfing" is Bearish Confrim Engulfing 3 Candle
//  Yellow ArrowUp is Normal Bullish Engulfing Candle
//  White ArrowDown is Normal Bearish Engulfing Candle
//  UpperBandLine, MiddleBandLine, LowerBandLine is Range Of Swing Price
//  Little Green Triangle is Signal To Buy
//  Little Red Triangle is Signal To Sell

//How To Use Indicator For Trading
//1. Confrim Signal Step
//  1.1) Bullish Trend
//      1.1.1) If Close Price < LowerBandLine
//      1.1.2) Must Have LightGreen Diamond "3Engulfing"
//      1.1.3) Direction Of BandLine are Up like this (↗)
//      1.1.4) Have a Cluster of Green Triangle
//      1.1.5) Sto Background Color is Green
//      **1.1.6) It's Good If Have a Yellow Direction Arrow Up (↗) but If Not Have a Yellow Direction Arrow Up (↗) No Problem
//  1.2) Bearish Trend
//      1.2.1) If Close Price > UpperBandLine
//      1.2.2) Must Have LightRed Diamond "3Engulfing"
//      1.2.3) Direction Of BandLine are Down like this (↘)
//      1.2.4) Have a Cluster of Red Triangle
//      1.1.5) Sto Background Color is Red
//      **1.2.6) It's Good If Have a White Direction Arrow Down (↘) but If Not Have a White Direction Arrow Down (↘) No Problem
//2. Trend Following for Short-Term/Mid-Term
//  2.1) Bullish Follow
//      2.1.1) Have a Cluster of Green Triangle
//      2.1.2) Have a Yellow Direction Arrow Up (↗) >>(or)<< LightGreen Diamond "3Engulfing"
//  2.2) Bearish Follow
//      2.2.1) Have a Cluster of Red Triangle
//      2.2.2) Have a White Direction Arrow Down (↘) >>(or)<< LightRed Diamond "3Engulfing"
//3. TP and SL - If You Following Trend or Confirm Signal
//  3.1) Bullish TP/SL
//      3.1.1) TakeProfit (TP)
//          3.1.1.1) Can TP IF Close > MiddleBandLine or CrossingUp (Sometime Not Large But More Time for TP From Intraday)
//          3.1.1.2) Can TP If Price Candle Breake UpperBandLine and Have a LightGreen Diamond "3Engulfing" or Have a Invert Arrow Direction
//      3.1.2) StopLoss (SL)
//          3.1.2.1) Can SL After Your Open Long/Buy Position by SwingLowLine
//  3.2) Bearish TP/SL
//      3.2.1) TakeProfit (TP)
//          3.2.1.1) Can TP If Close < MiddleBandLine or CrossingDown (Sometime Not Large But More Time for TP From Intraday)
//          3.2.1.2) Can TP If Price Candle Breake LowerBandLine and Have a LightRed Diamond "3Engulfing" or Have a Invert Arrow Direction
//      3.1.2) StopLoss (SL)
//          3.1.2.1) Can SL After Your Open Short/Sell Position by SwingHighLine

indicator("X48 - Indicator | Midnight Hunter | V.1.8", overlay = true, max_lines_count = 500, max_labels_count = 500,max_boxes_count = 500)
import PineCoders/Time/3


//////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////
//INPUTS
var GRP1 = "== Midnight Hunter Band Setting =="
ind1=input.bool(false,"",inline="0", group=GRP1)
HalfLength = input.int(56, "Centered TMA Half Period",inline="0", group=GRP1)
string PriceType = input.string("Weighted", "Price to use", options = ["Close", "Open", "High", "Low", "Median", "Typical", "Weighted", "Average"],inline="0", group=GRP1)
AtrPeriod = input.int(110, "Average true range period",inline="1", group=GRP1)
AtrMultiplier = input.float(2.5, "Average true range multiplier",inline="1", group=GRP1)
TMAangle = input.int(4, "Centered TMA angle caution",inline="2", group=GRP1)
tmawidth = input.int(defval = 1, title = 'Band LineWidth', minval = 1, maxval = 4,inline="2", group=GRP1)
i_timeZone   = input.string(defval = 'GMT+7', title = "TimeZone Text Alert",inline="2", group=GRP1)//TH Time

//Gold Hunter Setting : 56 , 110 , 2.5 , 4

//VARIABLES
float tmac = na
float tmau = na
float tmad = na

var float pastTmac = na //from the previous candle
var float pastTmau = na
var float pastTmad = na

float tmau_temp = na //before looping
float tmac_temp = na
float tmad_temp = na

float point = syminfo.pointvalue //NEEDS MORE TESTS

bool last = false //checks if a loop is needed
bool longalert = false
bool shortalert = false
string timeframe = na

if timeframe.isintraday and timeframe.multiplier >= 60 and timeframe.multiplier < 1440
    timeframe := str.tostring(timeframe.multiplier / 60) + " H"
else if timeframe.isintraday and timeframe.multiplier < 60
    timeframe := str.tostring(timeframe.multiplier) + " M"
else if timeframe.isintraday and timeframe.multiplier >= 1440
    timeframe := str.tostring(timeframe.multiplier) + " D"
else
    timeframe := timeframe.period


current_time = str.tostring(hour(timenow, i_timeZone), '00:') + str.tostring(minute(timenow, i_timeZone), '00:') + str.tostring(second(timenow, i_timeZone), '00')



var float limit_price = na

var string alertSignal = "EMPTY" //needed for alarms to avoid repetition

//COLORS
//var GRP2 = "== Midnight Colors =="
var color colorBuffer = na
color colorDOWN = input.color(color.new(color.red, 0), "Bear Color",inline="3", group=GRP1)
color colorUP = input.color(color.new(color.green, 0), "Bull Color",inline="3", group=GRP1)
color colorBands = input.color(color.new(#b2b5be, 0), "3 Bands Color",inline="3", group=GRP1)


//ALERTS
//var GRP3 = "Alerts (Needs to create alert manually after every change)"
bool cautionInput = input.bool(false, "Caution Label",inline="4", group=GRP1)

bool comingBackInput = input.bool(false, "Coming back",inline="4", group=GRP1)
bool crossUpInput = input.bool(false, "Crossing up",inline="5", group=GRP1)
bool crossDownInput = input.bool(false, "Crossing down",inline="5", group=GRP1)

bool onArrowDownInput = input.bool(true, "On arrow down",inline="6", group=GRP1)
bool onArrowUpInput = input.bool(true, "On arrow up",inline="6", group=GRP1)

//CLEAR LINES
a_allLines = line.all
if array.size(a_allLines) > 0 and ind1
    for p = 0 to array.size(a_allLines) - 1
        line.delete(array.get(a_allLines, p))
        
//GET PRICE        
Price(x) =>
    float price = switch PriceType
        "Close" => close[x]
        "Open" => open[x]
        "High" => high[x]
        "Low" => low[x]
        "Median" => (high[x] + low[x]) / 2
        "Typical" => (high[x] + low[x] + close[x]) / 3
        "Weighted" => (high[x] + low[x] + close[x] + close[x]) / 4
        "Average" => (high[x] + low[x] + close[x] + open[x])/ 4
    price

//MAIN
for i = HalfLength to 0 
    if ind1
        //ATR
        atr = 0.0
        for j = 0 to  AtrPeriod - 1
            atr += math.max(high[i + j + 10], close[i + j + 11]) - math.min(low[i + j + 10], close[i + j + 11])
        atr /= AtrPeriod
        
        //BANDS
        sum = (HalfLength + 1) * Price(i)
        sumw = (HalfLength + 1)
        k = HalfLength
        for j = 1 to HalfLength
            sum += k * Price(i + j)
            sumw += k
            if (j <= i)
                sum  += k * Price(i - j)
                sumw += k
            k -= 1
        tmac := sum/sumw
        tmau := tmac+AtrMultiplier*atr
        tmad := tmac-AtrMultiplier*atr
        
        //ALERTS
        if i == 0 //Only on a real candle  
            if (high > tmau and alertSignal != "UP") //crossing up band
                if crossUpInput == true //checks if activated
                    alert("Crossing up Band", alert.freq_once_per_bar_close) //calling alert
                alertSignal := "UP" //to avoid repeating 
            else if (low < tmad and alertSignal != "DOWN") //crossing down band
                if crossDownInput == true
                    alert("Crossing down Band", alert.freq_once_per_bar_close)
                alertSignal := "DOWN"
            else if (alertSignal == "DOWN" and high >= tmad and alertSignal != "EMPTY") //back from the down band
                if comingBackInput == true
                    alert("Coming back", alert.freq_once_per_bar_close)
                alertSignal := "EMPTY"
            else if (alertSignal == "UP" and low <= tmau and alertSignal != "EMPTY") //back from the up band
                if comingBackInput == true
                    alert("Coming back", alert.freq_once_per_bar_close)
                alertSignal := "EMPTY"
                
        //CHANGE TREND COLOR
        if pastTmac != 0.0 
            if tmac > pastTmac
                colorBuffer := colorUP
            if tmac < pastTmac
                colorBuffer := colorDOWN
                
        //SIGNALS
        reboundD = 0.0
        reboundU = 0.0
        caution = 0.0
        if pastTmac != 0.0 
            if (high[i + 1] > pastTmau and close[i + 1] > open[i + 1] and close[i] < open[i])
                reboundD := high[i] + AtrMultiplier * atr / 2
                if (tmac - pastTmac > TMAangle * point)
                    caution := reboundD + 10 * point
            if (low[i + 1] < pastTmad and close[i + 1] < open[i + 1] and close[i] > open[i])
                reboundU := low[i] - AtrMultiplier * atr / 2
                if (pastTmac - tmac > TMAangle * point)
                    caution := reboundU - 10 * point
        
        //LAST REAL
        if barstate.islast and i == HalfLength 
            last := true
            tmau_temp := tmau
            tmac_temp := tmac
            tmad_temp := tmad
            
        //DRAW HANDICAPPED BANDS
        if barstate.islast and i < HalfLength 
            line.new(bar_index - (i + 1), pastTmau, bar_index - (i), tmau, width = 2, style = line.style_dotted, color = colorBands)
            line.new(bar_index - (i + 1), pastTmac, bar_index - (i), tmac, width = 2, style = line.style_dotted, color = colorBuffer)
            line.new(bar_index - (i + 1), pastTmad, bar_index - (i), tmad, width = 2, style = line.style_dotted, color = colorBands)
            
        //DRAW SIGNALS
        if reboundD != 0 
            //label.new(bar_index - (i), reboundD, color = colorDOWN, style = label.style_triangledown, size = size.tiny, textcolor = na)
            label.new(bar_index - (i), reboundD, '▼', color = na, textcolor = colorDOWN, textalign=  text.align_center)
            if i == 0 and onArrowDownInput == true //alert
                longalert := true
                limit_price := close
                alert("↘️ Midnight Hunter : Sell Alert ↘️\n🪙 Asset : " + syminfo.ticker + "\n🕛 TimeFrame : " + str.tostring(timeframe) + "\n💹 Sell Price : " + str.tostring(limit_price) + " $\n\n⏰ Signal Time : " + str.tostring(current_time), alert.freq_once_per_bar_close) 
            if caution != 0 and cautionInput == true
                label.new(bar_index - (i), reboundD, color = colorUP, style = label.style_xcross, size = size.tiny, textcolor = na)
        if reboundU != 0 
            //label.new(bar_index - (i), reboundU, color = colorUP, style = label.style_triangleup, size = size.tiny, textcolor = na)
            label.new(bar_index - (i), reboundU, '▲', color = na, textcolor = colorUP, textalign = text.align_center)
            if i == 0 and onArrowUpInput == true //alert
                shortalert := true
                limit_price := close
                alert("↗️ Midnight Hunter : Buy Alert ↗️\n🪙 Asset : " + syminfo.ticker + "\n🕛 TimeFrame : " + str.tostring(timeframe) + "\n💹 Buy Price : " + str.tostring(limit_price) + " $\n\n⏰ Signal Time : " + str.tostring(current_time), alert.freq_once_per_bar_close) 
            if caution != 0 and cautionInput == true
                label.new(bar_index - (i), reboundU, color = colorDOWN, style = label.style_xcross, size = size.tiny, textcolor = na)
                
        //SAVE HISTORY
        pastTmac := tmac
        pastTmau := tmau
        pastTmad := tmad
        
        //LOOP IS ONLY FOR HANDICAPPED
        if barstate.islast != true 
            break

//DRAW REAL BANDS
plot(last and ind1? tmau_temp : tmau, title = "TMA Up", color = colorBands, linewidth=tmawidth, style = plot.style_line, offset = -HalfLength)
plot(last and ind1? tmac_temp : tmac, title = "TMA Mid", color = colorBuffer, linewidth=tmawidth, style = plot.style_line, offset = -HalfLength)
plot(last and ind1? tmad_temp : tmad, title = "TMA Down", color = colorBands, linewidth=tmawidth, style = plot.style_line, offset = -HalfLength)
////////////////////////////////////////////////////////////////////////////////////////////
var GRP2 = "== ENGULFING SIGNAL =="
ind2=input.bool(false,"2",inline="0", group=GRP2)
threeengulfing_mode = input.bool(title="3 Candle", defval=true,inline="0", group=GRP2)//, group="== ENGULFING SIGNAL ==", inline = '9')


// bullish engulfing (Bueng)
Bueng = open[3] > close[3] and open[2] > close[2] and open[1] > close[1] and close > open and (close >= open[1] or close[1] >= open) and close - open > open[1] - close[1]
plotshape(threeengulfing_mode and ind2? Bueng : na, style=shape.diamond, location=location.belowbar, color=color.new(#00e926,0), size=size.small, text = "3Engulfing", textcolor = color.new(#4eff64,0))

// bearish engulfing (Beeng)
Beeng = open[3] < close[3] and open[2] < close[2] and close[1] > open[1] and open > close and (open >= close[1] or open[1] >= close) and open - close > close[1] - open[1]
plotshape(threeengulfing_mode and ind2? Beeng : na, style=shape.diamond, location=location.abovebar, color=color.new(#ff571b,0), size=size.small, text = "3Engulfing", textcolor = color.new(#ff5a9b,0))

// bullish engulfing (Bueng)
Bueng2 = open[3] > close[3] ? open[2] > close[2] ? open[1] > close[1] ? close > open ? close >= open[1] ? close[1] >= open ? close - open > open[1] - close[1] ? color.blue : na : na : na : na : na : na : na
barcolor(threeengulfing_mode and ind2? Bueng2 : na)

// bearish engulfing (Beeng)
Beeng2 = open[3] < close[3] ? open[2] < close[2] ? close[1] > open[1] ? open > close ? open >= close[1] ? open[1] >= close ? open - close > close[1] - open[1] ? color.white : na : na : na : na : na : na : na
barcolor(threeengulfing_mode and ind2? Beeng2 : na)

////////////////////////////////////////////////////////////////////////////////////

/////////// Normal Setting ////////////////
var GRP3 = "= Multi MA SETTING ="

///////////// EMA/SMA SETTING /////////////
ind3=input.bool(false,"",inline="0", group=GRP3)
srcstrategy = input(close, title='Source',inline="0", group=GRP3) //group = '= Multi MA SETTING =', tooltip = 'Normal Line = Close \nSmooth Line = ohlc4')
fastSW = input.bool(title='Fast', defval=false,inline="1", group=GRP3)// group = '= Multi MA SETTING =', inline = '11')
ma1strategy = input(18, title='',inline="1", group=GRP3)// group = '= Multi MA SETTING =', inline = '12')
type1strategy = input.string('EMA', '', options=['SMA', 'EMA', 'WMA', 'HMA', 'RMA', 'VWMA'],inline="1", group=GRP3)// group = '= Multi MA SETTING =', tooltip = 'SMA / EMA / WMA / HMA / RMA / VWMA', inline = '12')
fastcolor = input.color(color.new(color.red,0),'',inline="1", group=GRP3)// group = '= Multi MA SETTING =', inline = '110', title = 'Fast MA Color')
slowSW = input.bool(title='Slow', defval=false,inline="2", group=GRP3)// group = '= Multi MA SETTING =', inline = '11')
ma3strategy = input(34, title='',inline="2", group=GRP3)// group = '= Multi MA SETTING =', inline = '13')
type3strategy = input.string('EMA', '', options=['SMA', 'EMA', 'WMA', 'HMA', 'RMA', 'VWMA'],inline="2", group=GRP3)// group = '= Multi MA SETTING =', tooltip = 'SMA / EMA / WMA / HMA / RMA / VWMA', inline = '13')
slowcolor = input.color(color.new(color.yellow,0),'',inline="2", group=GRP3)// group = '= Multi MA SETTING =', inline = '110', title = 'Slow MA Color')


pricestrategy = request.security(syminfo.tickerid, timeframe.period, srcstrategy)

price1strategy = switch type1strategy
	"EMA" => ta.ema(pricestrategy, ma1strategy)
	"SMA" => ta.sma(pricestrategy, ma1strategy)
	"WMA" => ta.wma(pricestrategy, ma1strategy)
	"HMA" => ta.hma(pricestrategy, ma1strategy)
	"RMA" => ta.rma(pricestrategy, ma1strategy)
	"VWMA" => ta.vwma(pricestrategy, ma1strategy)
		
price3strategy = switch type3strategy
	"EMA" => ta.ema(pricestrategy, ma3strategy)
	"SMA" => ta.sma(pricestrategy, ma3strategy)
	"WMA" => ta.wma(pricestrategy, ma3strategy)
	"HMA" => ta.hma(pricestrategy, ma3strategy)
	"RMA" => ta.rma(pricestrategy, ma3strategy)
	"VWMA" => ta.vwma(pricestrategy, ma3strategy)

FastL = plot(fastSW and ind3? price1strategy : na, 'Fast MA', color=fastcolor, style = plot.style_line, linewidth=2)
SlowL = plot(slowSW and ind3? price3strategy : na, 'Slow MA', color=slowcolor, style = plot.style_line, linewidth=2)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var GRP4 = "== BIG TREND =="
ind4=input.bool(false,"",inline="0", group=GRP4)
// srcstrategy_trend = input(close, title='SOURCE',inline="0", group=GRP4)//, group = '== BIG TREND ==', tooltip = 'Normal Line = Close \nSmooth Line = ohlc4')

death_mode = input.bool(title="Fast", defval=false,inline="1", group=GRP4)//, group="== BIG TREND ==")
death_trendlen = input(defval = 50, title = "",inline="1", group=GRP4)//, group = '== BIG TREND ==', inline = '21')
death_trendtype= input.string('SMA', '', options=['SMA', 'EMA', 'WMA', 'HMA', 'RMA', 'VWMA'],inline="1", group=GRP4)//, group = '== BIG TREND ==', tooltip = 'SMA / EMA / WMA / HMA / RMA / VWMA', inline = '21')
death_trendsrc = input(close, title='SOURCE',inline="1", group=GRP4)
death_trendcolor = input.color(color.new(#0000FF,0),'',inline="1", group=GRP4)
ma_trend_mode = input.bool(title="Slow", defval=false,inline="2", group=GRP4)//, group="== BIG TREND ==")
ma_trendlen = input(defval = 200, title = "",inline="2", group=GRP4)//, group = '== BIG TREND ==', inline = '19')
ma_trendtype = input.string('SMA', '', options=['SMA', 'EMA', 'WMA', 'HMA', 'RMA', 'VWMA'],inline="2", group=GRP4)//, group = '== BIG TREND ==', tooltip = 'SMA / EMA / WMA / HMA / RMA / VWMA', inline = '19')
ma_trendsrc = input(close, title='SOURCE',inline="2", group=GRP4)
ma_trendcolor = input.color(color.new(#FFAD00,0),'',inline="2", group=GRP4)

deathtrend = switch death_trendtype
	"EMA" => ta.ema(death_trendsrc , death_trendlen)
	"SMA" => ta.sma(death_trendsrc , death_trendlen)
	"WMA" => ta.wma(death_trendsrc , death_trendlen)
	"HMA" => ta.hma(death_trendsrc , death_trendlen)
	"RMA" => ta.rma(death_trendsrc , death_trendlen)
	"VWMA" => ta.vwma(death_trendsrc , death_trendlen)

matrend = switch ma_trendtype
	"EMA" => ta.ema(ma_trendsrc, ma_trendlen)
	"SMA" => ta.sma(ma_trendsrc, ma_trendlen)
	"WMA" => ta.wma(ma_trendsrc, ma_trendlen)
	"HMA" => ta.hma(ma_trendsrc, ma_trendlen)
	"RMA" => ta.rma(ma_trendsrc, ma_trendlen)
	"VWMA" => ta.vwma(ma_trendsrc, ma_trendlen)

mycol = matrend > close ? color.new(ma_trendcolor,0) : color.new(death_trendcolor,0)
deathcol = deathtrend > matrend ? color.new(death_trendcolor,50) : color.new(ma_trendcolor,50)
plot(death_mode and ind4? deathtrend : na, "DEATH-TREND",color=deathcol,linewidth = 1, style = plot.style_stepline_diamond)
plot(ma_trend_mode and ind4? matrend : na, "SMA-TREND",color=mycol,linewidth = 2)


///////////////////////////////////////////////////////////////////////////////////
var GRP5 = "== STO BACKGROUND =="
ind5=input.bool(false,"5",inline="0", group=GRP5)
engulfing_mode = input.bool(title="Normal Candle", defval=false,inline="0", group=GRP5)

stobg_mode = input.bool(title="Stochastic RSI Background Paint", defval=true,inline="0", group=GRP5)// group="== STO BACKGROUND ==")
stobg_plot = input.bool(title="STO-TEXT", defval=false,inline="0", group=GRP5)//, group="== STO BACKGROUND ==", inline = 'STOT1')
stobull_text = input.color(title = 'BULL', defval = color.white,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = 'STOT1')
stobear_text = input.color(title = 'BEAR', defval = color.orange,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = 'STOT1')
lengthMACD = input(title='Length', defval=21,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = '15')
offsetMACD = input(title='Offset', defval=0,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = '15')
srcMACD = input(close, title='Source',inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = '16')
length2MACD = input(title='Trigger Length', defval=6,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = '16')
bullstobg = input.color(title = 'Bull BG Color', defval = color.green,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = 'STOBG1')
bearstobg = input.color(title = 'Bear BG Color', defval = color.red,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = 'STOBG1')
transstobg = input.int(defval = 75, title = 'Trans', minval = 0, maxval = 100,inline="0", group=GRP5)//, group = '== STO BACKGROUND ==', inline = 'STOBG1')

lsma = ta.linreg(srcMACD, lengthMACD, offsetMACD)
lsma2 = ta.linreg(lsma, lengthMACD, offsetMACD)
b = lsma - lsma2
zlsma2 = lsma + b
trig2 = ta.sma(zlsma2, length2MACD)

c1 = zlsma2 > trig2 ? bullstobg : bearstobg
stobull = ta.crossover(zlsma2,trig2)
stobear = ta.crossunder(zlsma2, trig2)
plotshape(stobg_plot and ind5? stobull : na, title = 'STO-BULL', text = 'STO-BULL', location = location.belowbar, textcolor = stobull_text, size = size.tiny)
plotshape(stobg_plot and ind5? stobear : na, title = 'STO-BULL', text = 'STO-BEAR', location = location.abovebar, textcolor = stobear_text, size = size.tiny)

p1 = plot(stobg_mode and ind5? zlsma2 : na, color=c1, linewidth=0)
p2 = plot(stobg_mode and ind5? trig2 : na, color=c1, linewidth=0)
//fill(p1, p2, color=color.new(c1,transp = transstobg))

// bullish engulfing
bullishEngulfing = open[1] > close[1] ? close > open ? close >= open[1] ? close[1] >= open ? close - open > open[1] - close[1] ? color.purple : na : na : na : na : na
barcolor(engulfing_mode and ind5? bullishEngulfing : na)

// bearish engulfing
bearishEngulfing = close[1] > open[1] ? open > close ? open >= close[1] ? open[1] >= close ? open - close > close[1] - open[1] ? color.yellow : na : na : na : na : na
barcolor(engulfing_mode and ind5? bearishEngulfing : na)

bullishEngulfing2 = (open[1] > close[1] and close > open and close >= open[1] and close[1] >= open and close - open > open[1] - close[1]) and (zlsma2 > trig2)
bearishEngulfing2 = (close[1] > open[1] and open > close and open >= close[1] and open[1] >= close and open - close > close[1] - open[1]) and (zlsma2 < trig2)
// plotshape(engulfing_mode and ind5? bullishEngulfing2 : na, style=shape.labelup, location=location.belowbar, color=color.yellow, size=size.auto, text = '↗️')
// plotshape(engulfing_mode and ind5? bearishEngulfing2 : na, style=shape.labeldown, location=location.abovebar, color=color.white, size=size.auto, text = '↘️')

if ind5 and engulfing_mode
    if bullishEngulfing2  and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="↗️", color = color.new(color.yellow,0), textcolor = color.new(#0000FF,0), yloc=yloc.belowbar, style=label.style_none, size=size.small)
    if bearishEngulfing2  and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="↘️", color = color.new(color.yellow,0), textcolor = color.new(#FFAD00,0), yloc=yloc.abovebar, style=label.style_none, size=size.small)


Termline = ta.sma(close,200)
plot(ind5?Termline:na, "TermLine", color = #A9A9A9, linewidth = 2, style = plot.style_line)
///////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
ind6=input.bool(false,"6",inline="0", group="Inds6")

// Swing Plot
//Swing_MODE = input.bool(title="PLOT SWING MODE", defval=true, group = '= SWING SETTING =', tooltip = 'If Mode On = Plot Swing High and Swing Low')
Swing_STOP = input.bool(title="SWING MODE", defval=true,inline="0", group="Inds6")//, group = '== SWING SETTING ==', tooltip = 'If Mode On = Use Stop Loss By Last Swing')
pvtLenL = input.int(6, minval=1, title='Length Left',inline="0", group="Inds6")//, group = '== SWING SETTING ==', inline = '23')
pvtLenR = input.int(6, minval=1, title='Length Right',inline="0", group="Inds6")//, group = '== SWING SETTING ==', inline = '23')
swhcolor = input.color(defval = color.maroon, title = 'HH Color',inline="0", group="Inds6")//, inline = 'SWC1', group = '== SWING SETTING ==')
swlcolor = input.color(defval = color.green, title = 'LL Color',inline="0", group="Inds6")//, inline = 'SWC1', group = '== SWING SETTING ==')
swhwidth = input.int(defval = 1, title = 'Width', minval = 0, maxval = 4,inline="0", group="Inds6")//, inline = 'SWC1', group = '== SWING SETTING ==')

// Get High and Low Pivot Points
pvthi_ = ta.pivothigh(high, pvtLenL, pvtLenR)
pvtlo_ = ta.pivotlow(low, pvtLenL, pvtLenR)

// Force Pivot completion before plotting.
Shunt = 1  //Wait for close before printing pivot? 1 for true 0 for flase
maxLvlLen = 0  //Maximum Extension Length
pvthi = pvthi_[Shunt]
pvtlo = pvtlo_[Shunt]

// Count How many candles for current Pivot Level, If new reset.
counthi = ta.barssince(not na(pvthi))
countlo = ta.barssince(not na(pvtlo))

pvthis = fixnan(pvthi)
pvtlos = fixnan(pvtlo)
hipc = ta.change(pvthis) != 0 ? na : swhcolor
lopc = ta.change(pvtlos) != 0 ? na : swlcolor

// Display Pivot lines
plot(Swing_STOP and ind6? maxLvlLen == 0 or counthi < maxLvlLen ? pvthis : na : na, color=hipc, linewidth=swhwidth, offset=-pvtLenR - Shunt, title='Top Levels')
plot(Swing_STOP and ind6? maxLvlLen == 0 or countlo < maxLvlLen ? pvtlos : na : na, color=lopc, linewidth=swhwidth, offset=-pvtLenR - Shunt, title='Bottom Levels')
plot(Swing_STOP and ind6? maxLvlLen == 0 or counthi < maxLvlLen ? pvthis : na : na, color=hipc, linewidth=swhwidth, offset=0, title='Top Levels 2')
plot(Swing_STOP and ind6? maxLvlLen == 0 or countlo < maxLvlLen ? pvtlos : na : na, color=lopc, linewidth=swhwidth, offset=0, title='Bottom Levels 2')

//////////////////////////////
ind7=input.bool(false,"7",inline="0", group="Inds7")

// Standard practice declared input variables with i_ easier to identify
fvg_mode = input.bool(false, "Endable/Disable FVG MODE",inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==")
i_tf = input.timeframe("D", "MTF Timeframe",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==", inline = 'FVGTF')
i_mtf = input.string(defval = "Current TF",inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==", title = "MTF Options", options = ["Current TF", "Current + HTF", "HTF"], inline = 'FVGTF')
i_tfos = input.int(defval = 10,title = "Offset", minval = 0, maxval = 500 ,inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==", inline = "OS")
i_mtfos = input.int(defval = 20,title = "MTF Offset", minval = 0, maxval = 500 ,inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==", inline = "OS")
i_fillByMid = input.bool(false, "MidPoint Fill",inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==", tooltip = "When enabled FVG is filled when midpoint is tested")
i_deleteonfill = input.bool(true, "Delete Old On Fill",inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==")
i_labeltf = input.bool(false,"Label FVG Timeframe",inline="0", group="Inds7")//,group = "== FVG IMBALANCE SETTING ==")


i_bullishfvgcolor = input.color(color.new(color.green,70), "Bullish FVG",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==", inline = "BLFVG")
i_mtfbullishfvgcolor = input.color(color.new(color.lime,70), "MTF Bullish FVG",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==", inline = "BLFVG")
i_bearishfvgcolor = input.color(color.new(color.red,70), "Bearish FVG",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==", inline = "BRFVG")
i_mtfbearishfvgcolor = input.color(color.new(color.maroon,70), "MTF Bearish FVG",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==", inline = "BRFVG")
i_midPointColor = input.color(color.new(color.white,70), "MidPoint Color",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==")
i_textColor = input.color(color.white, "Text Color",inline="0", group="Inds7")//, group = "== FVG IMBALANCE SETTING ==")

// }

// ———————————————————— Global data {
//Using current bar data for HTF highs and lows instead of security to prevent future leaking
var htfH = open
var htfL = open

if close > htfH 
    htfH:= close
if close < htfL
    htfL := close

//Security Data, used for HTF Bar Data reference

sClose = request.security(syminfo.tickerid, i_tf, close[1], barmerge.gaps_off, barmerge.lookahead_on)
sHighP2 = request.security(syminfo.tickerid, i_tf, high[2], barmerge.gaps_off, barmerge.lookahead_on)
sLowP2 = request.security(syminfo.tickerid, i_tf, low[2], barmerge.gaps_off, barmerge.lookahead_on)
sOpen = request.security(syminfo.tickerid, i_tf, open[1], barmerge.gaps_off, barmerge.lookahead_on)
sBar = request.security(syminfo.tickerid, i_tf, bar_index, barmerge.gaps_off, barmerge.lookahead_on)

// }

//var keyword can be used to hold data in memory, with pinescript all data is lost including variables unless the var keyword is used to preserve this data
var bullishgapholder = array.new_box(0)
var bearishgapholder = array.new_box(0)
var bullishmidholder = array.new_line(0)
var bearishmidholder = array.new_line(0)
var bullishlabelholder = array.new_label(0)
var bearishlabelholder = array.new_label(0)
var transparentcolor = color.new(color.white,100)

// ———————————————————— Functions {

//function paramaters best declared with '_' this helps defer from variables in the function scope declaration and elsewhere e.g. close => _close
f_gapCreation(_upperlimit,_lowerlimit,_midlimit,_bar,_boxholder,_midholder,_labelholder,_boxcolor,_mtfboxcolor, _htf)=>
    timeholder = str.tostring(i_tf)
    offset = i_mtfos
    boxbgcolor = _mtfboxcolor
    if _htf == false
        timeholder := str.tostring(timeframe.period)
        offset := i_tfos
        boxbgcolor := _boxcolor
    if fvg_mode
        array.push(_boxholder,box.new(_bar,_upperlimit,_bar+1,_lowerlimit,border_color=transparentcolor,bgcolor = boxbgcolor, extend = extend.right))
    if i_fillByMid 
        array.push(_midholder,line.new(_bar,_midlimit,_bar+1,_midlimit,color = i_midPointColor, extend = extend.right))
    if i_labeltf
  
        array.push(_labelholder,label.new(_bar+ offset,_midlimit * 0.999, text = timeholder + " FVG", style =label.style_none, size = size.normal, textcolor = i_textColor))
        
//checks for gap between current candle and 2 previous candle e.g. low of current candle and high of the candle before last, this is the fair value gap.
f_gapLogic(_close,_high,_highp2,_low,_lowp2,_open,_bar,_htf)=>
    
    if _open > _close

        if _high - _lowp2 < 0
            
            upperlimit = _close - (_close - _lowp2 )
            lowerlimit = _close - (_close-_high)
            midlimit = (upperlimit + lowerlimit) / 2
            f_gapCreation(upperlimit,lowerlimit,midlimit,_bar,bullishgapholder,bullishmidholder,bullishlabelholder,i_bullishfvgcolor,i_mtfbullishfvgcolor,_htf)
          
    else
        
        if _low - _highp2 > 0 
            upperlimit = _close - (_close-_low)
            lowerlimit = _close- (_close - _highp2),
            midlimit = (upperlimit + lowerlimit) / 2
            f_gapCreation(upperlimit,lowerlimit,midlimit,_bar,bearishgapholder,bearishmidholder,bearishlabelholder,i_bearishfvgcolor,i_mtfbearishfvgcolor,_htf)
        
//Used to remove the gap from its relevant array as a result of it being filled.
f_gapDeletion(_currentgap,_i,_boxholder,_midholder,_labelholder)=>
   
    array.remove(_boxholder,_i)
    if i_fillByMid
        currentmid=array.get(_midholder,_i)
        array.remove(_midholder,_i)
       
        if i_deleteonfill
            line.delete(currentmid)
        else
            line.set_extend(currentmid, extend.none)
            line.set_x2(currentmid,bar_index)
    if i_deleteonfill
        box.delete(_currentgap)
        
    else
        box.set_extend(_currentgap,extend.none)
        box.set_right(_currentgap,bar_index)
    if i_labeltf
        currentlabel=array.get(_labelholder,_i)
        array.remove(_labelholder,_i)
        if i_deleteonfill
            label.delete(currentlabel)

//checks if gap has been filled either by 0.5 fill (i_fillByMid) or SHRINKS the gap to reflect the true value gap left.
f_gapCheck(_high,_low)=>

    if array.size(bullishgapholder) > 0

        for i = array.size(bullishgapholder)-1 to 0
            currentgap = array.get(bullishgapholder,i)
            currenttop = box.get_top(currentgap)
            if i_fillByMid 
                currentmid = array.get(bullishmidholder,i)
                currenttop := line.get_y1(currentmid)
            
                
            if _high >= currenttop
                f_gapDeletion(currentgap,i,bullishgapholder,bullishmidholder,bullishlabelholder)
            if _high > box.get_bottom(currentgap) and _high < box.get_top(currentgap)
               
                box.set_bottom(fvg_mode ? currentgap : na,_high)
       
    if array.size(bearishgapholder) > 0

        for i = array.size(bearishgapholder)-1 to 0
            currentgap = array.get(bearishgapholder,i)
            currentbottom = box.get_bottom(currentgap)
            if i_fillByMid 
                currentmid = array.get(bearishmidholder,i)
                currentbottom := line.get_y1(currentmid)           
            if _low <= currentbottom
                f_gapDeletion(currentgap,i,bearishgapholder,bearishmidholder,bearishlabelholder)
       
            if _low < box.get_top(currentgap) and _low > box.get_bottom(currentgap)
       
                box.set_top(fvg_mode ? currentgap : na,_low)      
                
                
// pine provided function to determine a new bar
is_newbar(res) =>
    t = time(res)
    not na(t) and (na(t[1]) or t > t[1])

if is_newbar(i_tf) and ind7
    htfH := open
    htfL := open

// }

// User Input, allow MTF data calculations
if is_newbar(i_tf) and (i_mtf == "Current + HTF" or i_mtf == "HTF") and ind7
    f_gapLogic(sClose, htfH, sHighP2, htfL, sLowP2, sOpen,bar_index,true)
    
// Use current Timeframe data to provide gap logic
if (i_mtf == "Current + HTF" or i_mtf == "Current TF") and ind7
    f_gapLogic(close[1],high,high[2],low,low[2],open[1],bar_index,false)

if ind7
    f_gapCheck(high,low)

///////////////////////////////////////////////////////////////////////////////////////////////////////////
ind8=input.bool(false,"8",inline="0", group="Inds8")
import jdehorty/EconomicCalendar/1 as calendar

// ==================
// ==== Settings ====
// ==================



//------Seting Color Calender Economi------

color1 = color.red
color2 = color.orange
color3 = color.yellow
color4 = color.lime
color5 = color.aqua
color6 = color.fuchsia
color7 = color.silver


show_fomc_meetings = input.bool(defval = false, title = "📅 FOMC",inline="0", group="Inds8")//, inline = "FOMC", group="⚙️ Settings", tooltip="The FOMC meets eight times a year to determine the course of monetary policy. The FOMC's decisions are announced in a press release at 2:15 p.m. ET on the day of the meeting. The press release is followed by a press conference at 2:30 p.m. ET. The FOMC's decisions are based on a review of economic and financial developments and its assessment of the likely effects of these developments on the economic outlook.")
c_fomcMeeting = input.color(color.new(color1, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "FOMC")

show_fomc_minutes = input.bool(defval = false, title = "📅 FOMC Minutes",inline="0", group="Inds8")//, inline = "FOMCMinutes", group="⚙️ Settings", tooltip="The FOMC minutes are released three weeks after each FOMC meeting. The minutes provide a detailed account of the FOMC's discussion of economic and financial developments and its assessment of the likely effects of these developments on the economic outlook.")
c_fomcMinutes = input.color(color.new(color2, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "FOMCMinutes")

show_ppi = input.bool(defval = false, title = "📅 Producer Price Index (PPI)",inline="0", group="Inds8")//, inline = "PPI", group="⚙️ Settings", tooltip="The Producer Price Index (PPI) measures changes in the price level of goods and services sold by domestic producers. The PPI is a weighted average of prices of a basket of goods and services, such as transportation, food, and medical care. The PPI is a leading indicator of CPI.")
c_ppi = input.color(color.new(color3, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "PPI")

show_cpi = input.bool(defval = false, title = "📅 Consumer Price Index (CPI)",inline="0", group="Inds8")//, inline = "CPI", group="⚙️ Settings", tooltip="The Consumer Price Index (CPI) measures changes in the price level of goods and services purchased by households. The CPI is a weighted average of prices of a basket of consumer goods and services, such as transportation, food, and medical care. The CPI-U is the most widely used measure of inflation. The CPI-U is based on a sample of about 87,000 households and measures the change in the cost of a fixed market basket of goods and services purchased by urban consumers.")
c_cpi = input.color(color.new(color4, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "CPI")

show_csi = input.bool(defval = false, title = "📅 Consumer Sentiment Index (CSI)",inline="0", group="Inds8")//, inline = "CSI", group="⚙️ Settings", tooltip="The University of Michigan's Consumer Sentiment Index (CSI) is a measure of consumer attitudes about the economy. The CSI is based on a monthly survey of 500 U.S. households. The index is based on consumers' assessment of present and future economic conditions. The CSI is a leading indicator of consumer spending, which accounts for about two-thirds of U.S. economic activity.")
c_csi = input.color(color.new(color5, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "CSI")

show_cci = input.bool(defval = false, title = "📅 Consumer Confidence Index (CCI)",inline="0", group="Inds8")//, inline = "CCI", group="⚙️ Settings", tooltip="The Conference Board's Consumer Confidence Index (CCI) is a measure of consumer attitudes about the economy. The CCI is based on a monthly survey of 5,000 U.S. households. The index is based on consumers' assessment of present and future economic conditions. The CCI is a leading indicator of consumer spending, which accounts for about two-thirds of U.S. economic activity.")
c_cci = input.color(color.new(color6, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "CCI")

show_nfp = input.bool(defval = false, title = "📅 Non-Farm Payroll (NFP)",inline="0", group="Inds8")//, inline = "NFP", group="⚙️ Settings", tooltip="The Non-Farm Payroll (NFP) is a measure of the change in the number of employed persons, excluding farm workers and government employees. The NFP is a leading indicator of consumer spending, which accounts for about two-thirds of U.S. economic activity.")
c_nfp = input.color(color.new(color7, 50), title = "Color",inline="0", group="Inds8")//, group="⚙️ Settings", inline = "NFP")

//show_legend = input.bool(false, "Show Legend",inline="0", group="Inds9")//, group="⚙️ Settings", inline = "Legend", tooltip="Show the color legend for the economic calendar events.")


// =======================
// ==== Dates & Times ====
// =======================

getUnixTime(_eventArr, _index) => 
    switch 
        timeframe.isdaily => array.get(_eventArr, _index) - timeframe.multiplier*86400000 // -n day(s)
        timeframe.isweekly => array.get(_eventArr, _index) - timeframe.multiplier*604800000 // -n week(s)
        timeframe.ismonthly => array.get(_eventArr, _index) - timeframe.multiplier*2592000000 // -n month(s)
        timeframe.isminutes and timeframe.multiplier > 59 => array.get(_eventArr, _index) - timeframe.multiplier*60000 // -n minute(s)
        => array.get(_eventArr, _index)

if barstate.islastconfirmedhistory and ind8

    // Note: An offset of -n units is needed to realign events with the timeframe in which they occurred
    if show_fomc_meetings
        fomcMeetingsArr = calendar.fomcMeetings()
        for i = 0 to array.size(fomcMeetingsArr) - 1
            unixTime = getUnixTime(fomcMeetingsArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_fomcMeeting, width=2, xloc=xloc.bar_time)

    if show_fomc_minutes
        fomcMinutesArr = calendar.fomcMinutes()
        for i = 0 to array.size(fomcMinutesArr) - 1
            unixTime = getUnixTime(fomcMinutesArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_fomcMinutes, width=2, xloc=xloc.bar_time)

    if show_ppi
        ppiArr = calendar.ppiReleases()
        for i = 0 to array.size(ppiArr) - 1
            unixTime = getUnixTime(ppiArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_ppi, width=2, xloc=xloc.bar_time)

    if show_cpi
        cpiArr = calendar.cpiReleases()
        for i = 0 to array.size(cpiArr) - 1
            unixTime = getUnixTime(cpiArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_cpi, width=2, xloc=xloc.bar_time)
    
    if show_csi
        csiArr = calendar.csiReleases()
        for i = 0 to array.size(csiArr) - 1
            unixTime = getUnixTime(csiArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_csi, width=2, xloc=xloc.bar_time)
    
    if show_cci
        cciArr = calendar.cciReleases()
        for i = 0 to array.size(cciArr) - 1
            unixTime = getUnixTime(cciArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_cci, width=2, xloc=xloc.bar_time)
    
    if show_nfp
        nfpArr = calendar.nfpReleases()
        for i = 0 to array.size(nfpArr) - 1
            unixTime = getUnixTime(nfpArr, i)
            line.new(x1=unixTime, y1=high, x2=unixTime, y2=low, extend=extend.both,color=c_nfp, width=2, xloc=xloc.bar_time)

// ================
// ==== Legend ====
// ================
if ind8
    var tbl = table.new(position.top_right, columns=8, rows=8, frame_color=#151715, frame_width=1, border_width=2, border_color=color.new(color.black, 100))
    units = timeframe.isminutes ? "m" : ""
    table.cell(tbl, 1, 0, syminfo.ticker + ' => ' + str.tostring(timeframe.period)+ units, text_halign=text.align_center, text_color=color.gray, text_size=size.small)
    table.cell(tbl, 2, 0, 'FOMC Meeting', text_halign=text.align_center, bgcolor=color.black, text_color=color1, text_size=size.small)
    table.cell(tbl, 3, 0, 'FOMC Minutes', text_halign=text.align_center, bgcolor=color.black, text_color=color2, text_size=size.small)
    table.cell(tbl, 4, 0, 'Producer Price Index (PPI)', text_halign=text.align_center, bgcolor=color.black, text_color=color3, text_size=size.small)
    table.cell(tbl, 1, 1, 'Consumer Price Index (CPI)', text_halign=text.align_center, bgcolor=color.black, text_color=color4, text_size=size.small)
    table.cell(tbl, 2, 1, 'Consumer Sentiment Index (CSI)', text_halign=text.align_center, bgcolor=color.black, text_color=color5, text_size=size.small)
    table.cell(tbl, 3, 1, 'Consumer Confidence Index (CCI)', text_halign=text.align_center, bgcolor=color.black, text_color=color6, text_size=size.small)
    table.cell(tbl, 4, 1, 'Non-Farm Payrolls (NFP)', text_halign=text.align_center, bgcolor=color.black, text_color=color7, text_size=size.small)

// =======================
// ==== CE And ===========
// =======================

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ind9=input.bool(false,"9",inline="0", group="Inds9")
showTF1 = input.bool(defval=true, title="📑>> Show Table Status Eg. Trend and Indicator Value",inline="0", group="Inds9") //group = "🗺️ >> Table For Analyze Trend",


//Dashboard_mode = input.bool(title="Show Dashboard", defval=true, group="= DASH BOARD =")
//Start dashboard


// ---- Table Settings Start ----//
max    = 160    //Maximum Length
min    = 10     //Minimum Length

// var GRP5 = "== DASH BOARD SETTING =="
// var GRP6 = "== DASH BOARD INDICATOR SETTING =="
// var GRP7 = "== DASH BOARD TABLE SETTING =="
// Input setting page start
dash_loc    = input.session("Bottom Right","Dashboard Posision"  ,["Top Right","Bottom Right","Top Left","Bottom Left", "Middle Right","Bottom Center"],inline="0", group="Inds9")//, group = GRP5, inline = 'DB1')
text_size   = input.session('Small',"Dashboard Size"  ,options=["Tiny","Small","Normal","Large"]  ,inline="0", group="Inds9")//,group=GRP5, inline =  'DB1')
cell_up     = input.color(color.green,'Up Cell Color'  ,inline="0", group="Inds9")//,group=GRP5, inline = 'DB2')
cell_dn     = input.color(color.red,'Down Cell Color'  ,inline="0", group="Inds9")//,group=GRP5, inline = 'DB2')
cell_Neut   = input.color(color.gray,'Nochange  Cell Color'  ,inline="0", group="Inds9")//,group=GRP5, inline = 'DB2')
row_col     = color.blue
col_col     = color.white
txt_col     = color.white
cell_transp = input.int(60,'Cell Transparency'  ,minval=0  ,maxval=100  ,inline="0", group="Inds9")//,group=GRP5)

Header_col  = color.rgb(35, 94, 255)
//MACDV color
cell_MACDV1 = color.teal
cell_MACDV2 = color.green
cell_MACDV3 = color.red
cell_MACDV4 = color.rgb(194, 179, 47)
cell_MACDV5 = color.green
cell_MACDV6 = color.red
cell_MACDV7 = color.rgb(204, 8, 24)
//Momentum color
cell_phase1 = color.green
cell_phase2 = color.teal
cell_phase3 = color.red
cell_phase4 = color.red
cell_phase5 = color.orange
cell_phase6 = color.green
// ---- Table Settings End ----}//

// ---- Indicators Show/Hide Settings Start ----//

showCls     = input.bool(defval=false, title="Price Close",inline="0", group="Inds9")//,     group=GRP7, inline = 'DBSHOW1')
showMA01    = input.bool(defval=false, title="MA01",inline="0", group="Inds9")//,            group=GRP7, inline = 'DBSHOW2')
showMA02    = input.bool(defval=false, title="MA02",inline="0", group="Inds9")//,            group=GRP7, inline = 'DBSHOW2')
showMACross = input.bool(defval=true, title="Trend",inline="0", group="Inds9")//,           group=GRP7, inline = 'DBSHOW2')
showRSI     = input.bool(defval=true, title="RSI ",inline="0", group="Inds9")//,            group=GRP7, inline = 'DBSHOW2')
showMACDV   = input.bool(defval=true, title="MACDV",inline="0", group="Inds9")//,           group=GRP7, inline = 'DBSHOW2')
showSignalV = input.bool(defval=false, title="SignalV",inline="0", group="Inds9")//,         group=GRP7, inline = 'DBSHOW4')
showMACDV_Status = input.bool(defval=true, title="Condition",inline="0", group="Inds9")//,  group=GRP7, inline = 'DBSHOW4')
showmomentum = input.bool(defval=false, title="Momentum",inline="0", group="Inds9")//,       group=GRP7, inline = 'DBSHOW4')

//---- MACD-V code start ----//
MACD_fast_length    = input(title="MACD-V Fast", defval=14,inline="0", group="Inds9")//, group=GRP6, inline = 'DBMACD1')
MACD_slow_length    = input(title="MACD-V Slow", defval=26,inline="0", group="Inds9")//, group=GRP6, inline = 'DBMACD1')
MACD_signal_length  = input.int(title="MACD-V Signal ",  minval = 1, maxval = 50, defval = 9,inline="0", group="Inds9")//, group=GRP6, inline = 'DBMACD2')
MACD_atr_length     = input(title="ATR", defval=26,inline="0", group="Inds9")//, group=GRP6, inline = 'DBMACD2')

// ---- Indicators Show/Hide Settings end ----}//


// ---- Timeframe Row Show/Hide Settings Start ----//

f_MACDV(_close) =>

    //---- Indicators code Start ----//
    CLS= _close[1]

    //---- RSI code start ----//
    rsiPeriod   = 14
    RSI         = ta.rsi(_close, rsiPeriod)

    //---- RSI code end ----//

    //---- EMA 1 code start----//
    length_MA1 = input.int(title="MA1",defval=50, minval=1,inline="0", group="Inds9")//, inline = 'TFROW1')
    MA1        = ta.ema(_close, length_MA1)
    //plot(MA01, color=color.red, title="MA1")
    //---- EMA 1  code end ----//

    //---- EMA 2 code start---//
    length_MA2 = input.int(title="MA2",defval=200, minval=1,inline="0", group="Inds9")//, inline = 'TFROW1')
    MA2        = ta.ema(_close, length_MA2)
    //plot(MA02, color=color.blue, title="MA2")
    //---- EMA 2  code end ----//

    // Input seeting page end
    // Calculating 
    fast_ma =  ta.ema(_close, MACD_fast_length)
    slow_ma =  ta.ema(_close, MACD_slow_length)
    atr     =  ta.atr(MACD_atr_length)
    MACDV   = (((fast_ma - slow_ma)/atr)*100)//[( 12 bar EMA - 26 bar EMA) / ATR(26) ] * 100
    SignalV = ta.ema(MACDV, MACD_signal_length)
    //---- MACD-V code end ----//

    //---- Indicators code end ----//


    //-----Condition start
    stringmacdv     =(MACDV>150) ? "Wait Continue/Reversal" :(MACDV>50 and MACDV<150 and MACDV>SignalV ) ? "Buy G0" :(MACDV>50 and MACDV<150 and MACDV<SignalV ) ? "Buy Retest":(MACDV<50) and (MACDV>-50) ? "Sideway" :(MACDV<-50 and MACDV>-150 and MACDV>SignalV ) ? "Short go":(MACDV<-50 and MACDV>-150 and MACDV<SignalV ) ? "Short Retest":(MACDV<150) ? "Wait Continue/Reversal" :na
    //momentum
    stringmomentum  =(CLS>MA1 and CLS>MA2 and MA1<MA2) ? "Accumulation:Stop Sell - Setup Buy" :(CLS>MA1 and CLS>MA2 and MA1>MA2) ? "Runing Up: Buy Runing":(CLS<MA1 and CLS>MA2 and MA1>MA2) ? "Re-Acumulasi: Continue Up":(CLS<MA1 and CLS<MA2 and MA1>MA2) ? "Distribution: Stop Buy-Setup Short":(CLS<MA1 and CLS<MA2 and MA1<MA2) ? "Re-Distribusi: Continue Down":(CLS>MA1 and CLS<MA2 and MA1<MA2) ? "Accumulation-Distribusi: Don't Trade Wait Break":na
        
    //-----Condition end

    // Return values
    [CLS, MA1, MA2, RSI, MACDV, SignalV, stringmacdv, stringmomentum]

// ] -------- Alerts ----------------- [


//---- Table Position & Size code start {----//
var table_position = dash_loc == 'Bottom Right' ? position.bottom_right :
  dash_loc == 'Bottom Left' ? position.bottom_left :
  dash_loc == 'Middle Right' ? position.middle_right :
  dash_loc == 'Bottom Center' ? position.bottom_center :
  dash_loc == 'Top Left' ? position.top_right : position.bottom_right
  
var table_text_size = text_size == 'Normal' ? size.normal :  text_size == 'Tiny' ? size.tiny :  text_size == 'Small' ? size.small :  text_size == 'Normal' ? size.normal : size.large
var t = table.new(table_position,15,math.abs(max-min)+2,  frame_color   =color.new(#f1ff2a, 0),  frame_width   =1,  border_color  =color.new(#f1ff2a,0),  border_width  =1)
//---- Table Position & Size code end ----//

// get values for table

[CLS_chart, MA1_chart, MA2_chart, RSI_chart, MACDV_chart, SignalV_chart, stringmacdv_chart, stringmomentum_chart] = f_MACDV(close)
[CLS_5_min, MA1_5_min, MA2_5_min, RSI_5_min, MACDV_5_min, SignalV_5_min, stringmacdv_5_min, stringmomentum_5_min] = request.security(syminfo.tickerid, "5", f_MACDV(close), lookahead=barmerge.lookahead_on)
[CLS_15_min, MA1_15_min, MA2_15_min, RSI_15_min, MACDV_15_min, SignalV_15_min, stringmacdv_15_min, stringmomentum_15_min] = request.security(syminfo.tickerid, "15", f_MACDV(close), lookahead=barmerge.lookahead_on)
[CLS_1_hour, MA1_1_hour, MA2_1_hour, RSI_1_hour, MACDV_1_hour, SignalV_1_hour, stringmacdv_1_hour, stringmomentum_1_hour] = request.security(syminfo.tickerid, "60", f_MACDV(close), lookahead=barmerge.lookahead_on)
[CLS_4_hour, MA1_4_hour, MA2_4_hour, RSI_4_hour, MACDV_4_hour, SignalV_4_hour, stringmacdv_4_hour, stringmomentum_4_hour] = request.security(syminfo.tickerid, "240", f_MACDV(close), lookahead=barmerge.lookahead_on)
[CLS_1_day, MA1_1_day, MA2_1_day, RSI_1_day, MACDV_1_day, SignalV_1_day, stringmacdv_1_day, stringmomentum_1_day] = request.security(syminfo.tickerid, "D", f_MACDV(close), lookahead=barmerge.lookahead_on)


//---- Table Column & Rows code start ----//
if (barstate.islast) and showTF1 == true and ind9
    //---- Table Main Column Headers code start ----//
    table.cell(t,1,1, 'TimeFrame',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showCls
        table.cell(t,2,1,'L.Close',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showMA01
        table.cell(t,3,1,'MA01',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showMA02
        table.cell(t,4,1,'MA02',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showMACross
        table.cell(t,5,1,'Trend',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showRSI
        table.cell(t,6,1,'RSI',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showMACDV
        table.cell(t,7,1,'MACDV',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showSignalV
        table.cell(t,8,1,'SignalV',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showMACDV_Status
        table.cell(t,9,1,'Condition',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)
    if showmomentum
        table.cell(t,10,1,'Phase Market',text_color=col_col,text_size=table_text_size,bgcolor=Header_col)  

    //---- Table Main Column Headers code end ----//
 
    //---- Display data code start ----//

    //---------------------- Chart period ----------------------------------

    table.cell(t, 1, 2, "Chart",text_color=color.white,text_size=table_text_size, bgcolor=color.rgb(0, 68, 255))
    if  showCls
        table.cell(t,2,2, str.tostring(CLS_chart, '#.###'),text_color=color.new(CLS_chart >CLS_chart[2] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(CLS_chart >CLS_chart[2] ? cell_up : cell_dn ,cell_transp))
    if  showMA01
        table.cell(t,3,2, str.tostring(MA1_chart, '#.###'),text_color=color.new(MA1_chart >MA1_chart[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_chart >MA1_chart[1]  ? cell_up : cell_dn ,cell_transp))
    if  showMA02
        table.cell(t,4,2, str.tostring(MA2_chart, '#.###'),text_color=color.new(MA2_chart >MA2_chart[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA2_chart >MA2_chart[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACross
        table.cell(t,5,2, MA1_chart > MA2_chart ? "Bullish" : "Bearish",text_color=color.new(MA1_chart > MA2_chart ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_chart > MA2_chart ? cell_up : cell_dn ,cell_transp))
    if  showRSI
        table.cell(t,6,2, str.tostring(RSI_chart, '#.###'),text_color=color.new(RSI_chart > 50 ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(RSI_chart > 50 ? cell_up : cell_dn ,cell_transp))
    if  showMACDV
        table.cell(t,7,2,str.tostring(MACDV_chart, '#.###'),text_color=color.new(MACDV_chart > MACDV_chart[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MACDV_chart > MACDV_chart[1] ? cell_up : cell_dn ,cell_transp))
    if  showSignalV
        table.cell(t,8,2,str.tostring(SignalV_chart, '#.###'),text_color=color.new(SignalV_chart > SignalV_chart[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(SignalV_chart> SignalV_chart[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACDV_Status
        table.cell(t,9,2,stringmacdv_chart,text_color=color.rgb(0, 0, 0),text_size=table_text_size, bgcolor=color.new(MACDV_chart>50 ? cell_up :MACDV_chart<-50 ?  cell_dn:cell_MACDV4  ,cell_transp)) 
    if  showmomentum
        table.cell(t,10,2,stringmomentum_chart,text_color=color.rgb(2, 2, 2),text_size=table_text_size, bgcolor=color.new(CLS_chart>MA1_chart and CLS_chart>MA2_chart and MA1_chart<MA2_chart ? cell_phase1 : (CLS_chart>MA1_chart and CLS_chart>MA2_chart and MA1_chart>MA2_chart) ? cell_phase2 : (CLS_chart<MA1_chart and CLS_chart>MA2_chart and MA1_chart>MA2_chart) ?cell_phase3 :(CLS_chart<MA1_chart and CLS_chart<MA2_chart and MA1_chart>MA2_chart) ? cell_phase4:(CLS_chart<MA1_chart and CLS_chart<MA2_chart and MA1_chart<MA2_chart) ? cell_phase5:(CLS_chart>MA1_chart and CLS_chart<MA2_chart and MA1_chart<MA2_chart) ? cell_phase6:col_col,cell_transp))

 //   alert("\nRSI =(" + str.tostring(CLS_chart, '#.###') + ")\n Momentum = (" + str.tostring(stringmomentum_chart) +  ")\n Trend =("+ str.tostring(MA1_chart > MA2_chart ? "Bullish" : "Bearish")+").", alert.freq_once_per_bar_close)
       


//---------------------- 5 minute chart ----------------------------------

    table.cell(t,1,3, "5 minute",text_color=color.white,text_size=table_text_size, bgcolor=color.rgb(0, 68, 255))
    if  showCls
        table.cell(t,2,3, str.tostring(CLS_5_min, '#.###'),text_color=color.new(CLS_5_min >CLS_5_min[2] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(CLS_5_min >CLS_5_min[2] ? cell_up : cell_dn ,cell_transp))
    if  showMA01
        table.cell(t,3,3, str.tostring(MA1_5_min, '#.###'),text_color=color.new(MA1_5_min >MA1_5_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_5_min >MA1_5_min[1]  ? cell_up : cell_dn ,cell_transp))
    if  showMA02
        table.cell(t,4,3, str.tostring(MA2_5_min, '#.###'),text_color=color.new(MA2_5_min >MA2_5_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA2_5_min >MA2_5_min[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACross
        table.cell(t,5,3, MA1_5_min > MA2_5_min ? "Bullish" : "Bearish",text_color=color.new(MA1_5_min > MA2_5_min ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_5_min > MA2_5_min ? cell_up : cell_dn ,cell_transp))
    if  showRSI
        table.cell(t,6,3, str.tostring(RSI_5_min, '#.###'),text_color=color.new(RSI_5_min > 50 ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(RSI_5_min > 50 ? cell_up : cell_dn ,cell_transp))
    if  showMACDV
        table.cell(t,7,3,str.tostring(MACDV_5_min, '#.###'),text_color=color.new(MACDV_5_min > MACDV_5_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MACDV_5_min > MACDV_5_min[1] ? cell_up : cell_dn ,cell_transp))
    if  showSignalV
        table.cell(t,8,3,str.tostring(SignalV_5_min, '#.###'),text_color=color.new(SignalV_5_min > SignalV_5_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(SignalV_5_min> SignalV_5_min[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACDV_Status
        table.cell(t,9,3,stringmacdv_5_min,text_color=color.rgb(5, 5, 5),text_size=table_text_size, bgcolor=color.new(MACDV_5_min>50 ? cell_up :MACDV_5_min<-50 ?  cell_dn:cell_MACDV4  ,cell_transp)) 
    if  showmomentum
        table.cell(t,10,3,stringmomentum_5_min,text_color=color.rgb(5, 5, 5),text_size=table_text_size, bgcolor=color.new(CLS_5_min>MA1_5_min and CLS_5_min>MA2_5_min and MA1_5_min<MA2_5_min ? cell_phase1 : (CLS_5_min>MA1_5_min and CLS_5_min>MA2_5_min and MA1_5_min>MA2_5_min) ? cell_phase2 : (CLS_5_min<MA1_5_min and CLS_5_min>MA2_5_min and MA1_5_min>MA2_5_min) ?cell_phase3 :(CLS_5_min<MA1_5_min and CLS_5_min<MA2_5_min and MA1_5_min>MA2_5_min) ? cell_phase4:(CLS_5_min<MA1_5_min and CLS_5_min<MA2_5_min and MA1_5_min<MA2_5_min) ? cell_phase5:(CLS_5_min>MA1_5_min and CLS_5_min<MA2_5_min and MA1_5_min<MA2_5_min) ? cell_phase6:col_col,cell_transp))


       

//---------------------- 15 minute chart ----------------------------------

    table.cell(t,1,4, "15 minute",text_color=color.rgb(245, 243, 243),text_size=table_text_size, bgcolor=color.rgb(0, 68, 255))
    if  showCls
        table.cell(t,2,4, str.tostring(CLS_15_min, '#.###'),text_color=color.new(CLS_15_min >CLS_15_min[2] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(CLS_15_min >CLS_15_min[2] ? cell_up : cell_dn ,cell_transp))
    if  showMA01
        table.cell(t,3,4, str.tostring(MA1_15_min, '#.###'),text_color=color.new(MA1_15_min >MA1_15_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_15_min >MA1_15_min[1]  ? cell_up : cell_dn ,cell_transp))
    if  showMA02
        table.cell(t,4,4, str.tostring(MA2_15_min, '#.###'),text_color=color.new(MA2_15_min >MA2_15_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA2_15_min >MA2_15_min[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACross
        table.cell(t,5,4, MA1_15_min > MA2_15_min ? "Bullish" : "Bearish",text_color=color.new(MA1_15_min > MA2_15_min ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_15_min > MA2_15_min ? cell_up : cell_dn ,cell_transp))
    if  showRSI
        table.cell(t,6,4, str.tostring(RSI_15_min, '#.###'),text_color=color.new(RSI_15_min > 50 ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(RSI_15_min > 50 ? cell_up : cell_dn ,cell_transp))
    if  showMACDV
        table.cell(t,7,4,str.tostring(MACDV_15_min, '#.###'),text_color=color.new(MACDV_15_min > MACDV_15_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MACDV_15_min > MACDV_15_min[1] ? cell_up : cell_dn ,cell_transp))
    if  showSignalV
        table.cell(t,8,4,str.tostring(SignalV_15_min, '#.###'),text_color=color.new(SignalV_15_min > SignalV_15_min[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(SignalV_15_min> SignalV_15_min[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACDV_Status
        table.cell(t,9,4,stringmacdv_15_min,text_color=color.rgb(7, 7, 7),text_size=table_text_size, bgcolor=color.new(MACDV_15_min>50 ? cell_up :MACDV_15_min<-50 ?  cell_dn:cell_MACDV4  ,cell_transp)) 
    if  showmomentum
        table.cell(t,10,4,stringmomentum_15_min,text_color=color.rgb(7, 7, 7),text_size=table_text_size, bgcolor=color.new(CLS_15_min>MA1_15_min and CLS_15_min>MA2_15_min and MA1_15_min<MA2_15_min ? cell_phase1 : (CLS_15_min>MA1_15_min and CLS_15_min>MA2_15_min and MA1_15_min>MA2_15_min) ? cell_phase2 : (CLS_15_min<MA1_15_min and CLS_15_min>MA2_15_min and MA1_15_min>MA2_15_min) ?cell_phase3 :(CLS_15_min<MA1_15_min and CLS_15_min<MA2_15_min and MA1_15_min>MA2_15_min) ? cell_phase4:(CLS_15_min<MA1_15_min and CLS_15_min<MA2_15_min and MA1_15_min<MA2_15_min) ? cell_phase5:(CLS_15_min>MA1_15_min and CLS_15_min<MA2_15_min and MA1_15_min<MA2_15_min) ? cell_phase6:col_col,cell_transp))


//---------------------- 1 Hour chart ----------------------------------

    table.cell(t,1,6, "1 Hour",text_color=color.white,text_size=table_text_size, bgcolor=color.rgb(0, 68, 255))
    if  showCls
        table.cell(t,2,6, str.tostring(CLS_1_hour, '#.###'),text_color=color.new(CLS_1_hour >CLS_1_hour[2] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(CLS_1_hour >CLS_1_hour[2] ? cell_up : cell_dn ,cell_transp))
    if  showMA01
        table.cell(t,3,6, str.tostring(MA1_1_hour, '#.###'),text_color=color.new(MA1_1_hour >MA1_1_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_1_hour >MA1_1_hour[1]  ? cell_up : cell_dn ,cell_transp))
    if  showMA02
        table.cell(t,4,6, str.tostring(MA2_1_hour, '#.###'),text_color=color.new(MA2_1_hour >MA2_1_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA2_1_hour >MA2_1_hour[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACross
        table.cell(t,5,6, MA1_1_hour > MA2_1_hour ? "Bullish" : "Bearish",text_color=color.new(MA1_1_hour > MA2_1_hour ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_1_hour > MA2_1_hour ? cell_up : cell_dn ,cell_transp))
    if  showRSI
        table.cell(t,6,6, str.tostring(RSI_1_hour, '#.###'),text_color=color.new(RSI_1_hour > 50 ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(RSI_1_hour > 50 ? cell_up : cell_dn ,cell_transp))
    if  showMACDV
        table.cell(t,7,6,str.tostring(MACDV_1_hour, '#.###'),text_color=color.new(MACDV_1_hour > MACDV_1_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MACDV_1_hour > MACDV_1_hour[1] ? cell_up : cell_dn ,cell_transp))
    if  showSignalV
        table.cell(t,8,6,str.tostring(SignalV_1_hour, '#.###'),text_color=color.new(SignalV_1_hour > SignalV_1_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(SignalV_1_hour> SignalV_1_hour[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACDV_Status
        table.cell(t,9,6,stringmacdv_1_hour,text_color=color.rgb(7, 7, 7),text_size=table_text_size, bgcolor=color.new(MACDV_1_hour>50 ? cell_up :MACDV_1_hour<-50 ?  cell_dn:cell_MACDV4  ,cell_transp)) 
    if  showmomentum
        table.cell(t,10,6,stringmomentum_1_hour,text_color=color.rgb(8, 8, 8),text_size=table_text_size, bgcolor=color.new(CLS_1_hour>MA1_1_hour and CLS_1_hour>MA2_1_hour and MA1_1_hour<MA2_1_hour ? cell_phase1 : (CLS_1_hour>MA1_1_hour and CLS_1_hour>MA2_1_hour and MA1_1_hour>MA2_1_hour) ? cell_phase2 : (CLS_1_hour<MA1_1_hour and CLS_1_hour>MA2_1_hour and MA1_1_hour>MA2_1_hour) ?cell_phase3 :(CLS_1_hour<MA1_1_hour and CLS_1_hour<MA2_1_hour and MA1_1_hour>MA2_1_hour) ? cell_phase4:(CLS_1_hour<MA1_1_hour and CLS_1_hour<MA2_1_hour and MA1_1_hour<MA2_1_hour) ? cell_phase5:(CLS_1_hour>MA1_1_hour and CLS_1_hour<MA2_1_hour and MA1_1_hour<MA2_1_hour) ? cell_phase6:col_col,cell_transp))


//---------------------- 4 Hour chart ----------------------------------

    table.cell(t,1,7, "4 Hour",text_color=color.white,text_size=table_text_size, bgcolor=color.rgb(0, 68, 255))
    if  showCls
        table.cell(t,2,7, str.tostring(CLS_4_hour, '#.###'),text_color=color.new(CLS_4_hour >CLS_4_hour[2] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(CLS_4_hour >CLS_4_hour[2] ? cell_up : cell_dn ,cell_transp))
    if  showMA01
        table.cell(t,3,7, str.tostring(MA1_4_hour, '#.###'),text_color=color.new(MA1_4_hour >MA1_4_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_4_hour >MA1_4_hour[1]  ? cell_up : cell_dn ,cell_transp))
    if  showMA02
        table.cell(t,4,7, str.tostring(MA2_4_hour, '#.###'),text_color=color.new(MA2_4_hour >MA2_4_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA2_4_hour >MA2_4_hour[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACross
        table.cell(t,5,7, MA1_4_hour > MA2_4_hour ? "Bullish" : "Bearish",text_color=color.new(MA1_4_hour > MA2_4_hour ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_4_hour > MA2_4_hour ? cell_up : cell_dn ,cell_transp))
    if  showRSI
        table.cell(t,6,7, str.tostring(RSI_4_hour, '#.###'),text_color=color.new(RSI_4_hour > 50 ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(RSI_4_hour > 50 ? cell_up : cell_dn ,cell_transp))
    if  showMACDV
        table.cell(t,7,7,str.tostring(MACDV_4_hour, '#.###'),text_color=color.new(MACDV_4_hour > MACDV_4_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MACDV_4_hour > MACDV_4_hour[1] ? cell_up : cell_dn ,cell_transp))
    if  showSignalV
        table.cell(t,8,7,str.tostring(SignalV_4_hour, '#.###'),text_color=color.new(SignalV_4_hour > SignalV_4_hour[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(SignalV_4_hour> SignalV_4_hour[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACDV_Status
        table.cell(t,9,7,stringmacdv_4_hour,text_color=color.rgb(7, 7, 7),text_size=table_text_size, bgcolor=color.new(MACDV_4_hour>50 ? cell_up :MACDV_4_hour<-50 ?  cell_dn:cell_MACDV4  ,cell_transp)) 
    if  showmomentum
        table.cell(t,10,7,stringmomentum_4_hour,text_color=color.rgb(7, 7, 7),text_size=table_text_size, bgcolor=color.new(CLS_4_hour>MA1_4_hour and CLS_4_hour>MA2_4_hour and MA1_4_hour<MA2_4_hour ? cell_phase1 : (CLS_4_hour>MA1_4_hour and CLS_4_hour>MA2_4_hour and MA1_4_hour>MA2_4_hour) ? cell_phase2 : (CLS_4_hour<MA1_4_hour and CLS_4_hour>MA2_4_hour and MA1_4_hour>MA2_4_hour) ?cell_phase3 :(CLS_4_hour<MA1_4_hour and CLS_4_hour<MA2_4_hour and MA1_4_hour>MA2_4_hour) ? cell_phase4:(CLS_4_hour<MA1_4_hour and CLS_4_hour<MA2_4_hour and MA1_4_hour<MA2_4_hour) ? cell_phase5:(CLS_4_hour>MA1_4_hour and CLS_4_hour<MA2_4_hour and MA1_4_hour<MA2_4_hour) ? cell_phase6:col_col,cell_transp))


//---------------------- 1 Day chart ----------------------------------

    table.cell(t,1,9, "1 Day",text_color=color.white,text_size=table_text_size, bgcolor=color.rgb(0, 68, 253))
    if  showCls
        table.cell(t,2,9, str.tostring(CLS_1_day, '#.###'),text_color=color.new(CLS_1_day >CLS_1_day[2] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(CLS_1_day >CLS_1_day[2] ? cell_up : cell_dn ,cell_transp))
    if  showMA01
        table.cell(t,3,9, str.tostring(MA1_1_day, '#.###'),text_color=color.new(MA1_1_day >MA1_1_day[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_1_day >MA1_1_day[1]  ? cell_up : cell_dn ,cell_transp))
    if  showMA02
        table.cell(t,4,9, str.tostring(MA2_1_day, '#.###'),text_color=color.new(MA2_1_day >MA2_1_day[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA2_1_day >MA2_1_day[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACross
        table.cell(t,5,9, MA1_1_day > MA2_1_day ? "Bullish" : "Bearish",text_color=color.new(MA1_1_day > MA2_1_day ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MA1_1_day > MA2_1_day ? cell_up : cell_dn ,cell_transp))
    if  showRSI
        table.cell(t,6,9, str.tostring(RSI_1_day, '#.###'),text_color=color.new(RSI_1_day > 50 ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(RSI_1_day > 50 ? cell_up : cell_dn ,cell_transp))
    if  showMACDV
        table.cell(t,7,9,str.tostring(MACDV_1_day, '#.###'),text_color=color.new(MACDV_1_day > MACDV_1_day[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(MACDV_1_day > MACDV_1_day[1] ? cell_up : cell_dn ,cell_transp))
    if  showSignalV
        table.cell(t,8,9,str.tostring(SignalV_1_day, '#.###'),text_color=color.new(SignalV_1_day > SignalV_1_day[1] ? cell_up : cell_dn ,0),text_size=table_text_size, bgcolor=color.new(SignalV_1_day> SignalV_1_day[1] ? cell_up : cell_dn ,cell_transp))
    if  showMACDV_Status
        table.cell(t,9,9,stringmacdv_1_day,text_color=color.rgb(5, 5, 5),text_size=table_text_size, bgcolor=color.new(MACDV_1_day>50 ? cell_up :MACDV_1_day<-50 ?  cell_dn:cell_MACDV4  ,cell_transp)) 
    if  showmomentum
        table.cell(t,10,9,stringmomentum_1_day,text_color=color.rgb(7, 7, 7),text_size=table_text_size, bgcolor=color.new(CLS_1_day>MA1_1_day and CLS_1_day>MA2_1_day and MA1_1_day<MA2_1_day ? cell_phase1 : (CLS_1_day>MA1_1_day and CLS_1_day>MA2_1_day and MA1_1_day>MA2_1_day) ? cell_phase2 : (CLS_1_day<MA1_1_day and CLS_1_day>MA2_1_day and MA1_1_day>MA2_1_day) ?cell_phase3 :(CLS_1_day<MA1_1_day and CLS_1_day<MA2_1_day and MA1_1_day>MA2_1_day) ? cell_phase4:(CLS_1_day<MA1_1_day and CLS_1_day<MA2_1_day and MA1_1_day<MA2_1_day) ? cell_phase5:(CLS_1_day>MA1_1_day and CLS_1_day<MA2_1_day and MA1_1_day<MA2_1_day) ? cell_phase6:col_col,cell_transp))


//---- Display data code end ----//
//End dahs board
// ////////////////////////////////////////////////////////////////////////////////////////////////////////
// // **********************************************
ind10=input.bool(false,"",inline="0", group="== ICHIMOKU SETTING ==")

//Ichi_Mode = input.bool(title="Ichimoku CLOUD MODE", defval=false,inline="0", group="== ICHIMOKU SETTING ==")//, group = '== ICHIMOKU SETTING ==')
tenkan_len  = input(9,'T',inline="1", group="== ICHIMOKU SETTING ==", tooltip = 'TENKAN = FAST SIGNAL')//,inline='tenkan', group = '== ICHIMOKU SETTING ==')
tenkan_mult = input(2.,'',inline="1", group="== ICHIMOKU SETTING ==")//,inline='tenkan', group = '== ICHIMOKU SETTING ==')
tenkan_color = input.color(defval = color.new(#FFFFFF,0), title = '',inline="1", group="== ICHIMOKU SETTING ==")

kijun_len   = input(26,'K',inline="2", group="== ICHIMOKU SETTING ==", tooltip = 'KIJUN = SLOW SIGNAL')//,inline='kijun', group = '== ICHIMOKU SETTING ==')
kijun_mult  = input(4.,'',inline="2", group="== ICHIMOKU SETTING ==")//,inline='kijun', group = '== ICHIMOKU SETTING ==')
kijun_color = input.color(defval = color.new(#FF5D00,0), title = '',inline="2", group="== ICHIMOKU SETTING ==")

spanB_len   = input(52,'S',inline="3", group="== ICHIMOKU SETTING ==", tooltip = 'SENKOU = CLOUD SIGNAL Span A/B')//,inline='span', group = '== ICHIMOKU SETTING ==', tooltip = 'SENKOU = CLOUD SIGNAL')
spanB_mult  = input(6.,'',inline="3", group="== ICHIMOKU SETTING ==")//,inline='span', group = '== ICHIMOKU SETTING ==')
cloudacolor = input.color(defval = color.new(color.orange,20), title = 'CLOUD-A',inline="3", group="== ICHIMOKU SETTING ==")//, inline='span1', group = '== ICHIMOKU SETTING ==')
cloudbcolor = input.color(defval = color.new(color.purple,20), title = 'CLOUD-B',inline="3", group="== ICHIMOKU SETTING ==")//, inline='span1', group = '== ICHIMOKU SETTING ==')

chi_color = input.color(defval = color.new(#73ecff,0), title = "Chikou-Color",inline="4", group="== ICHIMOKU SETTING ==")//, group = '== ICHIMOKU SETTING ==', inline = 'CHIKOU')
offset      = input(26,'Chikou',inline="4", group="== ICHIMOKU SETTING ==", tooltip = 'CHIKOU = CANDLE LOOK BACK DEFAULT = 26')//, group = '== ICHIMOKU SETTING ==', tooltip = 'CHIKOU = CANDLE LOOK BACK DEFAULT = 26', inline = 'CHIKOU')
//------------------------------------------------------------------------------
avg(src,length,mult)=>
    atr = ta.atr(length)*mult
    up = hl2 + atr
    dn = hl2 - atr
    upper = 0.,lower = 0.
    upper := src[1] < upper[1] ? math.min(up,upper[1]) : up
    lower := src[1] > lower[1] ? math.max(dn,lower[1]) : dn
    
    os = 0, max_ = 0., min_ = 0.
    os := src > upper ? 1 : src < lower ? 0 : os[1]
    spt = os == 1 ? lower : upper
    max_ := ta.cross(src,spt) ? math.max(src,max_[1]) : os == 1 ? math.max(src,max_[1]) : spt
    min_ := ta.cross(src,spt) ? math.min(src,min_[1]) : os == 0 ? math.min(src,min_[1]) : spt
    math.avg(max_,min_)
//------------------------------------------------------------------------------
tenkan = avg(close,tenkan_len,tenkan_mult)
kijun = avg(close,kijun_len,kijun_mult)

senkouA = math.avg(kijun,tenkan)
senkouB = avg(close,spanB_len,spanB_mult)
//------------------------------------------------------------------------------
// tenkan_css = color.white
// kijun_css = #ff5d00

cloud_a = cloudacolor
cloud_b = cloudbcolor

chikou_css = color.new(#73ecff,20)

plot(ind10 ? tenkan : na,'Tenkan-Sen',tenkan_color,style = plot.style_stepline, linewidth = 2)
plot(ind10? kijun : na,'Kijun-Sen',kijun_color, style = plot.style_stepline, linewidth = 2)

plot(ind10? ta.crossover(tenkan,kijun) ? kijun : na : na,'Crossover',#2157f3,3,plot.style_circles)
plot(ind10? ta.crossunder(tenkan,kijun) ? kijun : na : na,'Crossunder',#ff5d00,3,plot.style_circles)

A = plot(ind10? senkouA : na,'Senkou Span A',na,offset=offset-1)
B = plot(ind10? senkouB : na,'Senkou Span B',na,offset=offset-1)
fill(A,B,senkouA > senkouB ? cloud_a : cloud_b)

plot(ind10? close : na,'Chikou',chi_color,offset=-offset+1, linewidth = 2)

////////////////////////////////////////////////////////////////////////////////////////
ind11=input.bool(false,"",inline="1", group="== RSI MACD SETTING ==")


//RSI_MODE = input.bool(title="RSI MODE", defval=false,inline="0", group="== RSI SETTING ==")//, group = '== RSI SETTING >> COMFIRM RSI BEFORE OPEN POSITION ==', tooltip = 'If Mode On = Use RSI Strategy With Long and Short\n >> RSI Confirm Before Open Position')
//if RSI_MODE == true

OverBought = input(70, title='B',inline="1", group="== RSI MACD SETTING ==")//, group = '== RSI SETTING >> PLOT RSI SIGNAL OB OS ==', inline = 'RSI1')
OverSold = input(30, title='S',inline="1", group="== RSI MACD SETTING ==")//, group = '== RSI SETTING >> PLOT RSI SIGNAL OB OS ==', inline = 'RSI1')
RSILength = input(14, title='L',inline="1", group="== RSI MACD SETTING ==")//, group = '== RSI SETTING >> PLOT RSI SIGNAL OB OS ==')
RSIupcolor = input.color(defval = color.new(#0000FF,0), title = '',inline="1", group="== RSI MACD SETTING ==")//, inline = 'MACDCO', group = '== MACD SETTING ==')
RSIdowncolor = input.color(defval = color.new(#FFAD00,0), title = '',inline="1", group="== RSI MACD SETTING ==")//, inline = 'MACDCO', group = '== MACD SETTING ==')
vrsi = ta.rsi(srcstrategy, RSILength)
RSIUP = ta.crossover(vrsi, OverBought)
RSIDOWN = ta.crossunder(vrsi, OverSold)
// plotshape(ind11? RSIUP : na, title='RSIUP', text = 'OB', color=RSIupcolor , style=shape.circle, location=location.belowbar, size=size.auto)  //plot for buy icon
// plotshape(ind11? RSIDOWN : na, title='RSIDOWN', text = 'OS', color=RSIdowncolor, style=shape.circle, location=location.abovebar, size=size.auto)  //plot for buy icon

if ind11
    if RSIUP  and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="RSI_OB", color = color.new(RSIupcolor,0), textcolor = RSIupcolor, yloc=yloc.belowbar, style=label.style_none, size=size.small)
    if RSIDOWN and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="RSI_OS", color = color.new(RSIdowncolor,0), textcolor = RSIdowncolor, yloc=yloc.abovebar, style=label.style_none, size=size.small)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
ind12=input.bool(false,"",inline="2", group="== RSI MACD SETTING ==")
//MACD_MODE_SIG= input.bool(title="", defval=false,inline="0", group="== RSI MACD SETTING ==",tooltip = 'MACD MODE = MACD Cross Signal, If Mode On = Use MACD Strategy for Signal When Cross Up and Cross Down')//, group = '== MACD SETTING ==', tooltip = 'If Mode On = Use MACD Strategy for Signal When Cross Up and Cross Down')
MACDfastLength = input(12, title='F',inline="2", group="== RSI MACD SETTING ==")//, group = '== MACD SETTING ==', inline = 'MACDSIG1')
MACDslowlength = input(26, title='S',inline="2", group="== RSI MACD SETTING ==")//, group = '== MACD SETTING ==', inline = 'MACDSIG1')
MACDLength = input(18, title='L',inline="2", group="== RSI MACD SETTING ==")//, group = '== MACD SETTING ==')
macdupcolor = input.color(defval = color.new(#0000FF,0), title = '',inline="2", group="== RSI MACD SETTING ==")//, inline = 'MACDCO', group = '== MACD SETTING ==')
macddowncolor = input.color(defval = color.new(#FFAD00,0), title = '',inline="2", group="== RSI MACD SETTING ==")//, inline = 'MACDCO', group = '== MACD SETTING ==')
MACD = ta.ema(close, MACDfastLength) - ta.ema(close, MACDslowlength)
aMACD = ta.ema(MACD, MACDLength)
delta = MACD - aMACD
macdTPl = (ta.crossover(delta, 0))
macdTPs = (ta.crossunder(delta, 0))
// plotshape(ind12? macdTPl : na, title='macdTPl', text = '💎', color=macdupcolor, style=shape.circle, location=location.belowbar, size=size.auto)  //plot for buy icon
// plotshape(ind12? macdTPs : na, title='macdTPs', text = '💎', color=macddowncolor, style=shape.circle, location=location.abovebar, size=size.auto)  //plot for buy icon
if ind12
    if macdTPl and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="BO", color = color.new(macdupcolor,0), textcolor = macdupcolor, yloc=yloc.belowbar, style=label.style_triangleup, size=size.small)
    if macdTPs and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="BD", color = color.new(macddowncolor,0), textcolor = macddowncolor, yloc=yloc.abovebar, style=label.style_triangledown, size=size.small)

//////////////////////////////////////////////////////////////////////////////////////////




// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// // This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// // © nicks1008

// //@version=5
// indicator(title='CRUDE OIL BUY/SELL', shorttitle='CRUDE Scalp |3 Min', precision=2, overlay=true)
ind13=input.bool(false,"",inline="0", group="== CRUDE Scalp ==")
show1sig=input.bool(false,"Signal",inline="0", group="== CRUDE Scalp ==")
show2sig=input.bool(false,"Reversal",inline="0", group="== CRUDE Scalp ==")
RSIColOB = input.color(defval = color.new(#0000FF,0), title = '',inline="0", group="== CRUDE Scalp ==")//, inline = 'MACDCO', group = '== MACD SETTING ==')
RSIColOS = input.color(defval = color.new(#FFAD00,0), title = '',inline="0", group="== CRUDE Scalp ==")//, inline = 'MACDCO', group = '== MACD SETTING ==')


Rsi_value = input.int(14, title='L', step=1,inline="1", group="== CRUDE Scalp ==")
hl = input.int(80, title='B', step=1,inline="1", group="== CRUDE Scalp ==")
ll = input.int(20, title='S', step=1,inline="1", group="== CRUDE Scalp ==")
sma_value = input.int(70, title='MA', step=1,inline="1", group="== CRUDE Scalp ==")
rs = ta.rsi(close, Rsi_value)
sma1 = ta.sma(close, sma_value)

dist_SMA = 1
candle_length = 1

iff_1 = high < sma1 ? color.new(RSIColOS,30) : color.new(color.yellow,30)
iff_2 = low > sma1 ? color.new(RSIColOB,30) : iff_1
mycolor = rs >= hl or rs <= ll ? color.new(color.yellow,30) : iff_2
gaps = sma1 + dist_SMA  //Gap between price and SMA for Sell
gapb = sma1 - dist_SMA  //Gap between price and SMA for Buy
chartgap = gaps or gapb  //for both below or above the SMA 
gap1 = sma1 + 5
gapvalue = open / 100 * candle_length  //setting % with its Share price
gapp = high - low > gapvalue  //or rs<50     // Condition for Min candle size to be eligible for giving signal - Buy Calls
gapp2 = high - low > gapvalue  //or rs>55    // Condition for Min candle size to be eligible for giving signal - Sell Calls
bull = open < close and high - low > 2 * gapvalue and close > (high + open) / 2
bear = open > close and high - low > 2 * gapvalue and close < (low + open) / 2


rev1 = rs > 68 and open > close and open > gaps and high - low > gapvalue + 0.5 and low != close  //over red candles  "S" - uptrend
rev1a = rs > 90 and open < close and close > gaps and high != close and open != low  // over green candles"S" - uptrend
sellrev = rev1 or rev1a

rev2 = rs < 50 and open < close and open < gapb and open == low  //over green candles"B"
rev3 = rs < 30 and open > close and high > gapb and open != high and barstate.isconfirmed != bear  //over red candles"B"
rev4 = rs < 85 and close == high and high - low > gapvalue and open < close  //over green candle in both trends
hlrev_s = ta.crossunder(rs, hl)
llrev_b = ta.crossover(rs, ll) and open < close

buycall = open < close and open > sma1 and ta.cross(close[1], sma1) and close > sma1
sellcall = ta.cross(close, sma1) and open > close
BUY = ta.crossover(close[1], sma1) and close[1] > open[1] and high[0] > high[1] and close[0] > open[0]
SELL = ta.crossunder(low[1], sma1) and close[1] < open[1] and low[0] < low[1] and close[0] < open[0]

// plotshape(ind13 and show1sig?SELL:na, title='SELL', style=shape.labeldown, color=color.new(RSIColOB, 30), text='S', textcolor=color.new(#FFFFFF, 0))
// plotshape(ind13 and show1sig?BUY:na, title='BUY', style=shape.labelup, color=color.new(RSIColOS, 30), text='B', textcolor=color.new(#FFFFFF, 0), location=location.belowbar)

// plotshape(ind13 and show2sig?hlrev_s:na, title='Reversal1', style=shape.labeldown, color=color.new(RSIColOB, 20), text='S', textcolor=color.new(#FFFFFF, 0))
// plotshape(ind13 and show2sig?llrev_b:na, title='Reversal2', style=shape.labelup, color=color.new(RSIColOS, 20), text='B', textcolor=color.new(#FFFFFF, 0), location=location.belowbar)


if ind13
    if SELL and show1sig  and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="Sell", color = color.new(RSIColOB,0), textcolor = RSIColOB, yloc=yloc.abovebar, style=label.style_none, size=size.small)
    if BUY and show1sig and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="Buy", color = color.new(RSIColOS,0), textcolor = RSIColOS, yloc=yloc.belowbar, style=label.style_none, size=size.small)
    if hlrev_s and show2sig and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="Reversal-PullDown", color = color.new(RSIColOB,0), textcolor = RSIColOB, yloc=yloc.abovebar, style=label.style_none, size=size.small)
    if llrev_b and show2sig and barstate.isnew//barstate.islast
        label.new(bar_index, na, text="Reversal-PullUp", color = color.new(RSIColOS,0), textcolor = RSIColOS, yloc=yloc.belowbar, style=label.style_none, size=size.small)


barcolor(ind13 and show1sig and BUY ? color.new(RSIColOS, 0) : ind13 and show1sig and SELL ? color.new(RSIColOB, 30) : hlrev_s or llrev_b ? color.new(color.yellow, 0) : na)
plot(ind13?sma1:na, title='SMA', color=mycolor, linewidth=1)
alertcondition(hlrev_s or llrev_b, title='Both Reversal Signal', message='Reversal Alert')
alertcondition(SELL or BUY, title='Buy & Sell Signal Both', message='Buy/Sell Alert')
alertcondition(BUY, title='Only Buy Signal', message='Buy Alert')
alertcondition(SELL, title='Only Sell Signal', message='Sell Alert')
alertcondition(hlrev_s , title='Reversal from Top', message='Down Reversal Alert')
alertcondition(llrev_b, title='Reversal from Down', message='Up Reversal Alert')

///////////////////////////////////////////////////////////////////////////////////////////////////////////

// //@version=5
// // Join us on Telegram ->> https://t.me/+UAk3hqvoD89jZTlk


// indicator("NAS Ultimate Algo | Remastered+", overlay=true, precision=0, explicit_plot_zorder=true, max_labels_count=500)
// //------------------ NAS Ultimate Algo | Remastered+ | https://moneymovesalgo.com/ / ---------------//


// Get user input
sensitivity = input.int(defval=4, title="Sensitivity", minval=1, maxval=20)

enCloud   = input.bool(true, 'Enable Trend Ribbon', group='Cloud')
// Risk Management

levels      = input.bool(false, "Show TP/SL Levels" , group = "Risk Management" , inline = "MMDB2")
lvlLines    = input.bool(false, "Show Lines ", inline="levels", group = "Risk Management")
linesStyle  = input.string("SOLID", "", ["SOLID", "DASHED", "DOTTED"], inline="levels", group = "Risk Management")
lvlDistance = input.int(1, "Distance", 1, inline="levels2", group = "Risk Management")
lvlDecimals = input.int(2, "   Decimals", 1, 8, inline="levels2", group = "Risk Management")
atrRisk     = input.int(1, "Risk % ", 1, group = "Risk Management" , inline="levels3")
atrLen      = input.int(14, "  ATR Length", 1, group = "Risk Management" , inline="levels3")
//decimals  = lvlDecimals == 1 ? "#.#" : lvlDecimals == 2 ? "#.##" : lvlDecimals == 3 ? "#.###" : lvlDecimals == 4 ? "#.####" : lvlDecimals == 5 ? "#.#####" : lvlDecimals == 6 ? "#.######" : lvlDecimals == 7 ? "#.#######" : "#.########"
style = linesStyle == "SOLID" ? line.style_solid : linesStyle == "DASHED" ? line.style_dashed : line.style_dotted

// Signal Generation
supertrend(_src, factor, atrLen) =>
	atr = ta.atr(atrLen)
	upperBand = _src + factor * atr
	lowerBand = _src - factor * atr
	prevLowerBand = nz(lowerBand[1])
	prevUpperBand = nz(upperBand[1])
	lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
	upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
	int direction = na
	float superTrend = na
	prevSuperTrend = superTrend[1]
	if na(atr[1])
		direction := 1
	else if prevSuperTrend == prevUpperBand
		direction := close > upperBand ? -1 : 1
	else
		direction := close < lowerBand ? 1 : -1
	superTrend := direction == -1 ? lowerBand : upperBand
	[superTrend, direction] 
	


// SMA 
ocAvg       = math.avg(open, close)
sma4        = ta.sma(close, 8)
sma5        = ta.sma(close, 9)
sma9        = ta.sma(close, 13)
psar        = ta.sar(0.02, 0.02, 0.2)

//*in Easy Words Super Trend + SMA = Signals
[supertrend, direction] = supertrend(close, sensitivity, 11)


source = close, period = 150

// Colors
green  = color.new(#0000FF,0)
green2 = color.new(#0000FF,50)
red    = color.new(#FFAD00,0)
red2   = color.new(#FFAD00,50)

//barcolor(close > supertrend ? #2BE300 : red2)
// Candle Colouring By SpyDank
//TradingView standard RSI calculation
src = close
len = input.int(14, minval=1, title='RSI Length')
up = ta.rma(math.max(ta.change(src), 0), len)
down = ta.rma(-math.min(ta.change(src), 0), len)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - 100 / (1 + up / down)

// //Defining ranges by 10% increments
// tier1 = rsi <= 20
// tier2 = rsi > 20 and rsi <= 21
// tier3 = rsi > 21 and rsi <= 22
// tier4 = rsi > 22 and rsi <= 23
// tier5 = rsi > 23 and rsi <= 24
// tier6 = rsi > 24 and rsi <= 25
// tier7 = rsi > 25 and rsi <= 26
// tier8 = rsi > 26 and rsi <= 27
// tier9 = rsi > 27 and rsi <= 28
// tier10 = rsi > 28 and rsi <=29
// tier11 = rsi > 29 and rsi <=30
// tier12 = rsi > 30 and rsi <=31
// tier13 = rsi > 31 and rsi <=32
// tier14 = rsi > 32 and rsi <=33
// tier15 = rsi > 33 and rsi <=34
// tier16 = rsi > 34 and rsi <=35
// tier17 = rsi > 35 and rsi <=36
// tier18 = rsi > 36 and rsi <=37
// tier19 = rsi > 37 and rsi <=38
// tier20 = rsi > 38 and rsi <=39
// tier21 = rsi > 39 and rsi <=40
// tier22 = rsi > 40 and rsi <=41
// tier23 = rsi > 41 and rsi <=42
// tier24 = rsi > 42 and rsi <=43
// tier25 = rsi > 43 and rsi <=44
// tier26 = rsi > 44 and rsi <=45
// tier27 = rsi > 45 and rsi <=46
// tier28 = rsi > 46 and rsi <=47
// tier29 = rsi > 47 and rsi <=48
// tier30 = rsi > 48 and rsi <=49
// tier31 = rsi > 49 and rsi <=50
// tier32 = rsi > 50 and rsi <=51
// tier33 = rsi > 51 and rsi <=52
// tier34 = rsi > 52 and rsi <=53
// tier35 = rsi > 53 and rsi <=54
// tier36 = rsi > 54 and rsi <=55
// tier37 = rsi > 55 and rsi <=56
// tier38 = rsi > 56 and rsi <=57
// tier39 = rsi > 57 and rsi <=58
// tier40 = rsi > 58 and rsi <=59
// tier41 = rsi > 59 and rsi <=60
// tier42 = rsi > 60 and rsi <=61
// tier43 = rsi > 61 and rsi <=62
// tier44 = rsi > 62 and rsi <=63
// tier45 = rsi > 63 and rsi <=64
// tier46 = rsi > 64 and rsi <=65
// tier47 = rsi > 65 and rsi <=66
// tier48 = rsi > 66 and rsi <=67
// tier49 = rsi > 67 and rsi <=68
// tier50 = rsi > 68 and rsi <=69
// tier51 = rsi > 69 and rsi <=70
// tier52 = rsi > 70 and rsi <=71
// tier53 = rsi > 71 and rsi <=72
// tier54 = rsi > 72 and rsi <=73
// tier55 = rsi > 73 and rsi <=74
// tier56 = rsi > 74 and rsi <=75
// tier57 = rsi > 75 and rsi <=76
// tier58 = rsi > 76 and rsi <=77
// tier59 = rsi > 77 and rsi <=78
// tier60 = rsi > 78 and rsi <=79
// tier61 = rsi > 79 and rsi <=80


// //Assign color based on range
// barcolor(tier1 ? #FF0000 : na)
// barcolor(tier2 ? #FB0009 : na)
// barcolor(tier3 ? #F2001A : na)
// barcolor(tier4 ? #ED0023 : na)
// barcolor(tier5 ? #E9002C : na)
// barcolor(tier6 ? #E50035 : na)
// barcolor(tier7 ? #E0003E : na)
// barcolor(tier8 ? #DC0046 : na)
// barcolor(tier9 ? #D7004F : na)
// barcolor(tier10 ? #D30058 : na)
// barcolor(tier11 ? #CE0061 : na)
// barcolor(tier12 ? #CA006A : na)
// barcolor(tier13 ? #C60072 : na)
// barcolor(tier14 ? #C1007B : na)
// barcolor(tier15 ? #BD0084 : na)
// barcolor(tier16 ? #B8008D : na)
// barcolor(tier17 ? #B40095 : na)
// barcolor(tier18 ? #B0009E : na)
// barcolor(tier19 ? #AB00A7 : na)
// barcolor(tier20 ? #A700B0 : na)
// barcolor(tier21 ? #A200B9 : na)
// barcolor(tier22 ? #9E00C1 : na)
// barcolor(tier23 ? #9900CA : na)
// barcolor(tier24 ? #9500D3 : na)
// barcolor(tier25 ? #9100DC : na)
// barcolor(tier26 ? #8C00E5 : na)
// barcolor(tier27 ? #8800ED : na)
// barcolor(tier28 ? #8300F6 : na)
// barcolor(tier29 ? #7F00FF : na)
// barcolor(tier30 ? #7F00FF : na)
// barcolor(tier31 ? #7B09F6 : na)
// barcolor(tier32 ? #7612ED : na)
// barcolor(tier33 ? #721AE5 : na)
// barcolor(tier34 ? #6D23DC : na)
// barcolor(tier35 ? #692CD3 : na)
// barcolor(tier36 ? #6535CA : na)
// barcolor(tier37 ? #603EC1 : na)
// barcolor(tier38 ? #5C46B9 : na)
// barcolor(tier39 ? #584FB0 : na)
// barcolor(tier40 ? #5358A7 : na)
// barcolor(tier41 ? #4F619E : na)
// barcolor(tier42 ? #4A6A95 : na)
// barcolor(tier43 ? #46728D : na)
// barcolor(tier44 ? #427B84 : na)
// barcolor(tier45 ? #3D847B : na)
// barcolor(tier46 ? #398D72 : na)
// barcolor(tier47 ? #35956A : na)
// barcolor(tier48 ? #309E61 : na)
// barcolor(tier48 ? #2CA758 : na)
// barcolor(tier50 ? #27B04F : na)
// barcolor(tier51 ? #23B946 : na)
// barcolor(tier52 ? #1FC13E : na)
// barcolor(tier53 ? #1ACA35 : na)
// barcolor(tier54 ? #16D32C : na)
// barcolor(tier55 ? #12DC23 : na)
// barcolor(tier56 ? #0DE51A : na)
// barcolor(tier57 ? #09ED12 : na)
// barcolor(tier58 ? #04F609 : na)
// barcolor(tier59 ?  #00FF00 : na)




// High Lows
y1 = low - (ta.atr(30) * 2)
y1B = low - ta.atr(30)
y2 = high + (ta.atr(30) * 2)
y2B = high + ta.atr(30)

bull_ = ta.crossover(close, supertrend) and close >= sma9
bear_ = ta.crossunder(close, supertrend) and close <= sma9


// Plots

// ---------------------------- Fast ---------------------------- \\
candle  = ta.sma(close, 21)
reach   = ta.sma(close, 34)
candlep = plot(enCloud ? candle : na, color=color.new(#000000, 0))
reachp  = plot(enCloud ? reach  : na, color=color.new(#000000, 0))
fill(reachp, candlep, color= candle > reach ? color.new(#00CC00, 75) : color.new(#CC0000, 75))



buy  =  bull_ ? label.new(bar_index, y1, sma4 >= sma5 ? "Buy" : "Strong Buy", xloc.bar_index, yloc.price, color.new(#0000FF,0), label.style_label_up, color.new(#FFFFFF,0), size.normal) : na
sell =  bear_ ? label.new(bar_index, y2, sma4 <= sma5 ? "Sell" : "Strong Sell", xloc.bar_index, yloc.price, color.new(#FFAD00,0), label.style_label_down, color.new(#FFFFFF,0), size.normal) : na

trigger2 = bull_ ? 1 : 0
countBull = ta.barssince(bull_)
countBear = ta.barssince(bear_)
trigger   = nz(countBull, bar_index) < nz(countBear, bar_index) ? 1 : 0
atrBand = ta.atr(atrLen) * atrRisk
atrStop = trigger == 1 ? low - atrBand : high + atrBand


lastTrade(src) => ta.valuewhen(bull_ or bear_ , src, 0)

FunTarget(x)=>
	_target=(lastTrade(close)-lastTrade(atrStop))*x + lastTrade(close)

FunLa(Cond,Cond2,txt,source,col,lvlDist,txtcol,txtsize,style_)=>
	

	La = Cond ? label.new(time, close, txt + str.tostring(source, format.mintick), xloc.bar_time, yloc.price, col, label.style_label_left, txtcol, txtsize) : na
	label.set_x(La, label.get_x(La) + math.round(ta.change(time) * lvlDist))
	label.set_y(La, source)
	label.delete(La[1])
	Li = Cond and Cond2 ? line.new(bar_index - (trigger == 0 ? countBull : countBear), source, bar_index + lvlDist, source, xloc.bar_index, extend.none, col, style_, 2) : na, line.delete(Li[1])


// FunLiLa(txt,source,color,txtcolor,offset)=>
//     if session.isfirstbar 
//         line.delete(line.new(bar_index,source,last_bar_index+offset,source,color=color)[1])
//         label.delete(label.new(last_bar_index+offset,source,text=txt+": "+str.tostring(source,format.mintick),  style=label.style_label_left, color=color, size=size.small,textcolor=txtcolor, yloc=yloc.price)[1])


//FunLiLa("Open",request.security(syminfo.tickerid, 'D', (open),gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on),#000080,#FFFFFF,12)


// lineEntry = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), lastTrade(close), bar_index + lvlDistance, lastTrade(close), xloc.bar_index, extend.none, color.rgb(0, 255, 251), style, 2) : na, line.delete(lineEntry[1])
// lineStop  = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), lastTrade(atrStop), bar_index + lvlDistance, lastTrade(atrStop), xloc.bar_index, extend.none, #CC0000, style, 2) : na, line.delete(lineStop[1])
// lineTp1Rl   = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), FunTarget(1.618), bar_index + lvlDistance, FunTarget(1.618), xloc.bar_index, extend.none, green2, style, 2) : na, line.delete(lineTp1Rl[1])
// lineTp2RL   = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), FunTarget(2.618), bar_index + lvlDistance, FunTarget(2.618), xloc.bar_index, extend.none, green2, style, 2) : na, line.delete(lineTp2RL[1])
// lineTp3RL   = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), FunTarget(3.618), bar_index + lvlDistance, FunTarget(3.618), xloc.bar_index, extend.none, green2, style, 2) : na, line.delete(lineTp3RL[1])
// lineTp4RL   = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), FunTarget(4.618), bar_index + lvlDistance, FunTarget(4.618), xloc.bar_index, extend.none, green2, style, 2) : na, line.delete(lineTp3RL[1])
// lineTp5RL   = levels and lvlLines ? line.new(bar_index - (trigger == 0 ? countBull : countBear), FunTarget(5.618), bar_index + lvlDistance, FunTarget(5.618), xloc.bar_index, extend.none, green2, style, 2) : na, line.delete(lineTp3RL[1])



FunLa(levels,lvlLines,"ENTRY ",lastTrade(close),color.rgb(0, 255, 251),lvlDistance,color.new(#FFFFFF,0),size.small,style)
FunLa(levels,lvlLines,"SL       ",lastTrade(atrStop),red2,lvlDistance,color.new(#FFFFFF,0),size.small,style)
FunLa(levels,lvlLines,"1:1 TP ",FunTarget(1.618),green2,lvlDistance,color.new(#FFFFFF,0),size.small,style)
FunLa(levels,lvlLines,"1:2 TP ",FunTarget(2.618),green2,lvlDistance,color.new(#FFFFFF,0),size.small,style)
FunLa(levels,lvlLines,"1:3 TP ",FunTarget(3.618),green2,lvlDistance,color.new(#FFFFFF,0),size.small,style)
FunLa(levels,lvlLines,"1:4 TP ",FunTarget(4.618),green2,lvlDistance,color.new(#FFFFFF,0),size.small,style)
FunLa(levels,lvlLines,"1:5 TP ",FunTarget(5.618),green2,lvlDistance,color.new(#FFFFFF,0),size.small,style)

// entry = levels ? label.new(time, close, "ENTRY " + str.tostring(lastTrade(close), decimals), xloc.bar_time, yloc.price, color.rgb(0, 255, 251), label.style_label_left, color.white, size.normal) : na
// label.set_x(entry, label.get_x(entry) + math.round(ta.change(time) * lvlDistance))
// label.set_y(entry, lastTrade(close))
// label.delete(entry[1])



// stop_y = lastTrade(atrStop)
// stop  = levels ? label.new(time, close, "SL " + str.tostring(stop_y, decimals), xloc.bar_time, yloc.price, red2, label.style_label_left, color.white, size.normal) : na
// label.set_x(stop, label.get_x(stop) + math.round(ta.change(time) * lvlDistance))
// label.set_y(stop, stop_y)
// label.delete(stop[1])

// tp1Rl_y = (lastTrade(close)-lastTrade(atrStop))*1 + lastTrade(close)
// tp1Rl   = levels ? label.new(time, close, "1:1 TP " + str.tostring(tp1Rl_y, decimals), xloc.bar_time, yloc.price, green2, label.style_label_left, color.white, size.normal ) : na
// label.set_x(tp1Rl, label.get_x(tp1Rl) + math.round(ta.change(time) * lvlDistance))
// label.set_y(tp1Rl, tp1Rl_y)
// label.delete(tp1Rl[1])

// tp2RL_y = (lastTrade(close)-lastTrade(atrStop))*2 + lastTrade(close)
// tp2RL   = levels ? label.new(time, close, "2:1 TP " + str.tostring(tp2RL_y, decimals), xloc.bar_time, yloc.price, green2, label.style_label_left, color.white, size.normal) : na
// label.set_x(tp2RL, label.get_x(tp2RL) + math.round(ta.change(time) * lvlDistance))
// label.set_y(tp2RL, tp2RL_y)
// label.delete(tp2RL[1])

// tp3RL_y = (lastTrade(close)-lastTrade(atrStop))*3 + lastTrade(close)
// tp3RL   = levels ? label.new(time, close, "3:1 TP " + str.tostring(tp3RL_y, decimals), xloc.bar_time, yloc.price, green2, label.style_label_left, color.white, size.normal) : na
// label.set_x(tp3RL, label.get_x(tp3RL) + math.round(ta.change(time) * lvlDistance))
// label.set_y(tp3RL, tp3RL_y)
// label.delete(tp3RL[1])

// tp4RL_y = (lastTrade(close)-lastTrade(atrStop))*4 + lastTrade(close)
// tp4RL   = levels ? label.new(time, close, "4:1 TP " + str.tostring(tp4RL_y, decimals), xloc.bar_time, yloc.price, green2, label.style_label_left, color.white, size.normal) : na
// label.set_x(tp4RL, label.get_x(tp4RL) + math.round(ta.change(time) * lvlDistance))
// label.set_y(tp4RL, tp4RL_y)
// label.delete(tp4RL[1])

// tp3RL_y = (lastTrade(close)-lastTrade(atrStop))*3 + lastTrade(close)
// tp3RL   = levels ? label.new(time, close, "3:1 TP " + str.tostring(tp3RL_y, decimals), xloc.bar_time, yloc.price, green2, label.style_label_left, color.white, size.normal) : na
// label.set_x(tp3RL, label.get_x(tp3RL) + math.round(ta.change(time) * lvlDistance))
// label.set_y(tp3RL, tp3RL_y)
// label.delete(tp3RL[1])

// tp3RL_y = (lastTrade(close)-lastTrade(atrStop))*3 + lastTrade(close)
// tp3RL   = levels ? label.new(time, close, "3:1 TP " + str.tostring(tp3RL_y, decimals), xloc.bar_time, yloc.price, green2, label.style_label_left, color.white, size.normal) : na
// label.set_x(tp3RL, label.get_x(tp3RL) + math.round(ta.change(time) * lvlDistance))
// label.set_y(tp3RL, tp3RL_y)
// label.delete(tp3RL[1])





alertcondition(bull_, title='Buy Signal', message = "BUY")
alertcondition(bear_, title='Buy Signal', message = "BUY") 


import protradingart/pta_plot/6 as pp 
pp.peakprofit(bull_, bear_)
